
projectembedded4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000335e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  0000335e  000033f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080017a  0080017a  0000350c  2**0
                  ALLOC
  3 .stab         000029b8  00000000  00000000  0000350c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f02  00000000  00000000  00005ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bf76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c8e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <main>
      8a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 58       	subi	r30, 0x86	; 134
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <LED_init>:
 *      Author: belal
 */
#include "LED.h"

/* Initializes LEDS*/
void LED_init(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*Sets up LEDS to outputs*/
	GPIO_setupPinDirection(LED_PORT_ID, LED_RED_PIN_ID, PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_ID, LED_BLUE_PIN_ID, PIN_OUTPUT);
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_ID, LED_GREEN_PIN_ID, PIN_OUTPUT);
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	/*Initializes them to zero*/
	GPIO_writePin(LED_PORT_ID, LED_RED_PIN_ID, LOGIC_LOW);
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LED_PORT_ID, LED_GREEN_PIN_ID, LOGIC_LOW);
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LED_PORT_ID, LED_BLUE_PIN_ID, LOGIC_LOW);
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <LED_on>:
void LED_on(LED_ID id){
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LED_PORT_ID, id, LOGIC_HIGH); /*Turns on*/
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	69 81       	ldd	r22, Y+1	; 0x01
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <LED_off>:
void LED_off(LED_ID id){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LED_PORT_ID, id, LOGIC_LOW);/*Turns off*/
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	69 81       	ldd	r22, Y+1	; 0x01
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <Buzzer_init>:
 */
#include "buzzer.h"
#include "std_types.h"


void Buzzer_init(void){
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	65 e0       	ldi	r22, 0x05	; 5
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	65 e0       	ldi	r22, 0x05	; 5
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <Buzzer_on>:
void Buzzer_on(void){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	65 e0       	ldi	r22, 0x05	; 5
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <Buzzer_off>:
void Buzzer_off(void){
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	65 e0       	ldi	r22, 0x05	; 5
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <GPIO_setupPinDirection+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <GPIO_setupPinDirection+0x8>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	6a 83       	std	Y+2, r22	; 0x02
     f18:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	88 30       	cpi	r24, 0x08	; 8
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <GPIO_setupPinDirection+0x1c>
     f20:	d5 c0       	rjmp	.+426    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	08 f0       	brcs	.+2      	; 0xf2a <GPIO_setupPinDirection+0x24>
     f28:	d1 c0       	rjmp	.+418    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3d 83       	std	Y+5, r19	; 0x05
     f32:	2c 83       	std	Y+4, r18	; 0x04
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <GPIO_setupPinDirection+0x3a>
     f3e:	43 c0       	rjmp	.+134    	; 0xfc6 <GPIO_setupPinDirection+0xc0>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	2c f4       	brge	.+10     	; 0xf54 <GPIO_setupPinDirection+0x4e>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	71 f0       	breq	.+28     	; 0xf6e <GPIO_setupPinDirection+0x68>
     f52:	bc c0       	rjmp	.+376    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
     f54:	2c 81       	ldd	r18, Y+4	; 0x04
     f56:	3d 81       	ldd	r19, Y+5	; 0x05
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <GPIO_setupPinDirection+0x5a>
     f5e:	5f c0       	rjmp	.+190    	; 0x101e <GPIO_setupPinDirection+0x118>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	83 30       	cpi	r24, 0x03	; 3
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <GPIO_setupPinDirection+0x66>
     f6a:	85 c0       	rjmp	.+266    	; 0x1076 <GPIO_setupPinDirection+0x170>
     f6c:	af c0       	rjmp	.+350    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	a1 f4       	brne	.+40     	; 0xf9c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f74:	aa e3       	ldi	r26, 0x3A	; 58
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ea e3       	ldi	r30, 0x3A	; 58
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <GPIO_setupPinDirection+0x8c>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <GPIO_setupPinDirection+0x88>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	98 c0       	rjmp	.+304    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f9c:	aa e3       	ldi	r26, 0x3A	; 58
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ea e3       	ldi	r30, 0x3A	; 58
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <GPIO_setupPinDirection+0xb4>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <GPIO_setupPinDirection+0xb0>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	83 c0       	rjmp	.+262    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	a1 f4       	brne	.+40     	; 0xff4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fcc:	a7 e3       	ldi	r26, 0x37	; 55
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e7 e3       	ldi	r30, 0x37	; 55
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_setupPinDirection+0xe4>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_setupPinDirection+0xe0>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	6c c0       	rjmp	.+216    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ff4:	a7 e3       	ldi	r26, 0x37	; 55
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e7 e3       	ldi	r30, 0x37	; 55
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_setupPinDirection+0x10c>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_setupPinDirection+0x108>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	57 c0       	rjmp	.+174    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	a1 f4       	brne	.+40     	; 0x104c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1024:	a4 e3       	ldi	r26, 0x34	; 52
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e4 e3       	ldi	r30, 0x34	; 52
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <GPIO_setupPinDirection+0x13c>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <GPIO_setupPinDirection+0x138>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	40 c0       	rjmp	.+128    	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    104c:	a4 e3       	ldi	r26, 0x34	; 52
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e4 e3       	ldi	r30, 0x34	; 52
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_setupPinDirection+0x164>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_setupPinDirection+0x160>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	2b c0       	rjmp	.+86     	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    107c:	a1 e3       	ldi	r26, 0x31	; 49
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e1 e3       	ldi	r30, 0x31	; 49
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_setupPinDirection+0x194>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_setupPinDirection+0x190>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10a4:	a1 e3       	ldi	r26, 0x31	; 49
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e3       	ldi	r30, 0x31	; 49
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_setupPinDirection+0x1bc>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_setupPinDirection+0x1b8>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <GPIO_writePin+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <GPIO_writePin+0x8>
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	6a 83       	std	Y+2, r22	; 0x02
    10ee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	88 30       	cpi	r24, 0x08	; 8
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <GPIO_writePin+0x1c>
    10f6:	d5 c0       	rjmp	.+426    	; 0x12a2 <GPIO_writePin+0x1c6>
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	84 30       	cpi	r24, 0x04	; 4
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <GPIO_writePin+0x24>
    10fe:	d1 c0       	rjmp	.+418    	; 0x12a2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3d 83       	std	Y+5, r19	; 0x05
    1108:	2c 83       	std	Y+4, r18	; 0x04
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <GPIO_writePin+0x3a>
    1114:	43 c0       	rjmp	.+134    	; 0x119c <GPIO_writePin+0xc0>
    1116:	2c 81       	ldd	r18, Y+4	; 0x04
    1118:	3d 81       	ldd	r19, Y+5	; 0x05
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <GPIO_writePin+0x4e>
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	71 f0       	breq	.+28     	; 0x1144 <GPIO_writePin+0x68>
    1128:	bc c0       	rjmp	.+376    	; 0x12a2 <GPIO_writePin+0x1c6>
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	3d 81       	ldd	r19, Y+5	; 0x05
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <GPIO_writePin+0x5a>
    1134:	5f c0       	rjmp	.+190    	; 0x11f4 <GPIO_writePin+0x118>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <GPIO_writePin+0x66>
    1140:	85 c0       	rjmp	.+266    	; 0x124c <GPIO_writePin+0x170>
    1142:	af c0       	rjmp	.+350    	; 0x12a2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	a1 f4       	brne	.+40     	; 0x1172 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    114a:	ab e3       	ldi	r26, 0x3B	; 59
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb e3       	ldi	r30, 0x3B	; 59
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_writePin+0x8c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_writePin+0x88>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	98 c0       	rjmp	.+304    	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1172:	ab e3       	ldi	r26, 0x3B	; 59
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	eb e3       	ldi	r30, 0x3B	; 59
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_writePin+0xb4>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_writePin+0xb0>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	83 c0       	rjmp	.+262    	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	a1 f4       	brne	.+40     	; 0x11ca <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11a2:	a8 e3       	ldi	r26, 0x38	; 56
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e8 e3       	ldi	r30, 0x38	; 56
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_writePin+0xe4>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_writePin+0xe0>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	6c c0       	rjmp	.+216    	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11ca:	a8 e3       	ldi	r26, 0x38	; 56
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e3       	ldi	r30, 0x38	; 56
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_writePin+0x10c>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_writePin+0x108>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	57 c0       	rjmp	.+174    	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	a1 f4       	brne	.+40     	; 0x1222 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_writePin+0x13c>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_writePin+0x138>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	40 c0       	rjmp	.+128    	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_writePin+0x164>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_writePin+0x160>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	2b c0       	rjmp	.+86     	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	a1 f4       	brne	.+40     	; 0x127a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1252:	a2 e3       	ldi	r26, 0x32	; 50
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e2 e3       	ldi	r30, 0x32	; 50
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <GPIO_writePin+0x194>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <GPIO_writePin+0x190>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    127a:	a2 e3       	ldi	r26, 0x32	; 50
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_writePin+0x1bc>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_writePin+0x1b8>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <GPIO_readPin+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <GPIO_readPin+0x8>
    12ba:	0f 92       	push	r0
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12c4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 30       	cpi	r24, 0x08	; 8
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <GPIO_readPin+0x1c>
    12cc:	84 c0       	rjmp	.+264    	; 0x13d6 <GPIO_readPin+0x124>
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <GPIO_readPin+0x24>
    12d4:	80 c0       	rjmp	.+256    	; 0x13d6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3d 83       	std	Y+5, r19	; 0x05
    12de:	2c 83       	std	Y+4, r18	; 0x04
    12e0:	4c 81       	ldd	r20, Y+4	; 0x04
    12e2:	5d 81       	ldd	r21, Y+5	; 0x05
    12e4:	41 30       	cpi	r20, 0x01	; 1
    12e6:	51 05       	cpc	r21, r1
    12e8:	79 f1       	breq	.+94     	; 0x1348 <GPIO_readPin+0x96>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	91 05       	cpc	r25, r1
    12f2:	34 f4       	brge	.+12     	; 0x1300 <GPIO_readPin+0x4e>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	21 15       	cp	r18, r1
    12fa:	31 05       	cpc	r19, r1
    12fc:	69 f0       	breq	.+26     	; 0x1318 <GPIO_readPin+0x66>
    12fe:	6b c0       	rjmp	.+214    	; 0x13d6 <GPIO_readPin+0x124>
    1300:	4c 81       	ldd	r20, Y+4	; 0x04
    1302:	5d 81       	ldd	r21, Y+5	; 0x05
    1304:	42 30       	cpi	r20, 0x02	; 2
    1306:	51 05       	cpc	r21, r1
    1308:	b9 f1       	breq	.+110    	; 0x1378 <GPIO_readPin+0xc6>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <GPIO_readPin+0x64>
    1314:	49 c0       	rjmp	.+146    	; 0x13a8 <GPIO_readPin+0xf6>
    1316:	5f c0       	rjmp	.+190    	; 0x13d6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1318:	e9 e3       	ldi	r30, 0x39	; 57
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_readPin+0x7e>
    132c:	55 95       	asr	r21
    132e:	47 95       	ror	r20
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_readPin+0x7a>
    1334:	ca 01       	movw	r24, r20
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	90 70       	andi	r25, 0x00	; 0
    133a:	88 23       	and	r24, r24
    133c:	19 f0       	breq	.+6      	; 0x1344 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	49 c0       	rjmp	.+146    	; 0x13d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	47 c0       	rjmp	.+142    	; 0x13d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1348:	e6 e3       	ldi	r30, 0x36	; 54
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_readPin+0xae>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_readPin+0xaa>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	88 23       	and	r24, r24
    136c:	19 f0       	breq	.+6      	; 0x1374 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	31 c0       	rjmp	.+98     	; 0x13d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1374:	19 82       	std	Y+1, r1	; 0x01
    1376:	2f c0       	rjmp	.+94     	; 0x13d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1378:	e3 e3       	ldi	r30, 0x33	; 51
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_readPin+0xde>
    138c:	55 95       	asr	r21
    138e:	47 95       	ror	r20
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_readPin+0xda>
    1394:	ca 01       	movw	r24, r20
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	90 70       	andi	r25, 0x00	; 0
    139a:	88 23       	and	r24, r24
    139c:	19 f0       	breq	.+6      	; 0x13a4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	19 c0       	rjmp	.+50     	; 0x13d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	17 c0       	rjmp	.+46     	; 0x13d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13a8:	e0 e3       	ldi	r30, 0x30	; 48
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_readPin+0x10e>
    13bc:	55 95       	asr	r21
    13be:	47 95       	ror	r20
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_readPin+0x10a>
    13c4:	ca 01       	movw	r24, r20
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	90 70       	andi	r25, 0x00	; 0
    13ca:	88 23       	and	r24, r24
    13cc:	19 f0       	breq	.+6      	; 0x13d4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13d4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <GPIO_setupPortDirection+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GPIO_setupPortDirection+0x8>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	90 f5       	brcc	.+100    	; 0x1462 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3c 83       	std	Y+4, r19	; 0x04
    1406:	2b 83       	std	Y+3, r18	; 0x03
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	d1 f0       	breq	.+52     	; 0x1446 <GPIO_setupPortDirection+0x5e>
    1412:	2b 81       	ldd	r18, Y+3	; 0x03
    1414:	3c 81       	ldd	r19, Y+4	; 0x04
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	2c f4       	brge	.+10     	; 0x1426 <GPIO_setupPortDirection+0x3e>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 f0       	breq	.+24     	; 0x143c <GPIO_setupPortDirection+0x54>
    1424:	1e c0       	rjmp	.+60     	; 0x1462 <GPIO_setupPortDirection+0x7a>
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	3c 81       	ldd	r19, Y+4	; 0x04
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	81 f0       	breq	.+32     	; 0x1450 <GPIO_setupPortDirection+0x68>
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	81 f0       	breq	.+32     	; 0x145a <GPIO_setupPortDirection+0x72>
    143a:	13 c0       	rjmp	.+38     	; 0x1462 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	80 83       	st	Z, r24
    1444:	0e c0       	rjmp	.+28     	; 0x1462 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	80 83       	st	Z, r24
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1450:	e4 e3       	ldi	r30, 0x34	; 52
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	80 83       	st	Z, r24
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    145a:	e1 e3       	ldi	r30, 0x31	; 49
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
			break;
		}
	}
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <GPIO_writePort+0x6>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <GPIO_writePort+0x8>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	90 f5       	brcc	.+100    	; 0x14ea <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3c 83       	std	Y+4, r19	; 0x04
    148e:	2b 83       	std	Y+3, r18	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	d1 f0       	breq	.+52     	; 0x14ce <GPIO_writePort+0x5e>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <GPIO_writePort+0x3e>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <GPIO_writePort+0x54>
    14ac:	1e c0       	rjmp	.+60     	; 0x14ea <GPIO_writePort+0x7a>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <GPIO_writePort+0x68>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <GPIO_writePort+0x72>
    14c2:	13 c0       	rjmp	.+38     	; 0x14ea <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 83       	st	Z, r24
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14ce:	e8 e3       	ldi	r30, 0x38	; 56
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <GPIO_readPort+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <GPIO_readPort+0x8>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1506:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	84 30       	cpi	r24, 0x04	; 4
    150c:	90 f5       	brcc	.+100    	; 0x1572 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3c 83       	std	Y+4, r19	; 0x04
    1516:	2b 83       	std	Y+3, r18	; 0x03
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	d1 f0       	breq	.+52     	; 0x1556 <GPIO_readPort+0x5e>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	2c f4       	brge	.+10     	; 0x1536 <GPIO_readPort+0x3e>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	61 f0       	breq	.+24     	; 0x154c <GPIO_readPort+0x54>
    1534:	1e c0       	rjmp	.+60     	; 0x1572 <GPIO_readPort+0x7a>
    1536:	2b 81       	ldd	r18, Y+3	; 0x03
    1538:	3c 81       	ldd	r19, Y+4	; 0x04
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	81 f0       	breq	.+32     	; 0x1560 <GPIO_readPort+0x68>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	81 f0       	breq	.+32     	; 0x156a <GPIO_readPort+0x72>
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    154c:	e9 e3       	ldi	r30, 0x39	; 57
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	0e c0       	rjmp	.+28     	; 0x1572 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1556:	e6 e3       	ldi	r30, 0x36	; 54
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	09 c0       	rjmp	.+18     	; 0x1572 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1560:	e3 e3       	ldi	r30, 0x33	; 51
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    156a:	e0 e3       	ldi	r30, 0x30	; 48
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    15ac:	80 91 7a 01 	lds	r24, 0x017A
    15b0:	90 91 7b 01 	lds	r25, 0x017B
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    15b8:	e0 91 7a 01 	lds	r30, 0x017A
    15bc:	f0 91 7b 01 	lds	r31, 0x017B
    15c0:	09 95       	icall
	}
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <ICU_init+0x6>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    15f6:	a1 e3       	ldi	r26, 0x31	; 49
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e3       	ldi	r30, 0x31	; 49
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8f 7b       	andi	r24, 0xBF	; 191
    1602:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1604:	ef e4       	ldi	r30, 0x4F	; 79
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8c e0       	ldi	r24, 0x0C	; 12
    160a:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    160c:	ae e4       	ldi	r26, 0x4E	; 78
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	ee e4       	ldi	r30, 0x4E	; 78
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	98 2f       	mov	r25, r24
    1618:	98 7f       	andi	r25, 0xF8	; 248
    161a:	e9 81       	ldd	r30, Y+1	; 0x01
    161c:	fa 81       	ldd	r31, Y+2	; 0x02
    161e:	80 81       	ld	r24, Z
    1620:	89 2b       	or	r24, r25
    1622:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1624:	ae e4       	ldi	r26, 0x4E	; 78
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ee e4       	ldi	r30, 0x4E	; 78
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	2f 7b       	andi	r18, 0xBF	; 191
    1632:	e9 81       	ldd	r30, Y+1	; 0x01
    1634:	fa 81       	ldd	r31, Y+2	; 0x02
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	00 24       	eor	r0, r0
    163e:	96 95       	lsr	r25
    1640:	87 95       	ror	r24
    1642:	07 94       	ror	r0
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	07 94       	ror	r0
    164a:	98 2f       	mov	r25, r24
    164c:	80 2d       	mov	r24, r0
    164e:	82 2b       	or	r24, r18
    1650:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1652:	ec e4       	ldi	r30, 0x4C	; 76
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	11 82       	std	Z+1, r1	; 0x01
    1658:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    165a:	e6 e4       	ldi	r30, 0x46	; 70
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	11 82       	std	Z+1, r1	; 0x01
    1660:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1662:	a9 e5       	ldi	r26, 0x59	; 89
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e9 e5       	ldi	r30, 0x59	; 89
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 62       	ori	r24, 0x20	; 32
    166e:	8c 93       	st	X, r24
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <ICU_setCallBack+0x6>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	90 93 7b 01 	sts	0x017B, r25
    1690:	80 93 7a 01 	sts	0x017A, r24
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    16aa:	ae e4       	ldi	r26, 0x4E	; 78
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ee e4       	ldi	r30, 0x4E	; 78
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	28 2f       	mov	r18, r24
    16b6:	2f 7b       	andi	r18, 0xBF	; 191
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	00 24       	eor	r0, r0
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	07 94       	ror	r0
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	07 94       	ror	r0
    16cc:	98 2f       	mov	r25, r24
    16ce:	80 2d       	mov	r24, r0
    16d0:	82 2b       	or	r24, r18
    16d2:	8c 93       	st	X, r24
}
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    16e4:	e6 e4       	ldi	r30, 0x46	; 70
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    16fa:	ec e4       	ldi	r30, 0x4C	; 76
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	11 82       	std	Z+1, r1	; 0x01
    1700:	10 82       	st	Z, r1
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1710:	ef e4       	ldi	r30, 0x4F	; 79
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1
	TCCR1B = 0;
    1716:	ee e4       	ldi	r30, 0x4E	; 78
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	10 82       	st	Z, r1
	TCNT1 = 0;
    171c:	ec e4       	ldi	r30, 0x4C	; 76
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	11 82       	std	Z+1, r1	; 0x01
    1722:	10 82       	st	Z, r1
	ICR1 = 0;
    1724:	e6 e4       	ldi	r30, 0x46	; 70
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	11 82       	std	Z+1, r1	; 0x01
    172a:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    172c:	a9 e5       	ldi	r26, 0x59	; 89
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e9 e5       	ldi	r30, 0x59	; 89
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7d       	andi	r24, 0xDF	; 223
    1738:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    173a:	10 92 7b 01 	sts	0x017B, r1
    173e:	10 92 7a 01 	sts	0x017A, r1
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	2e 97       	sbiw	r28, 0x0e	; 14
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 ea       	ldi	r26, 0xA0	; 160
    1776:	b1 e4       	ldi	r27, 0x41	; 65
    1778:	8b 87       	std	Y+11, r24	; 0x0b
    177a:	9c 87       	std	Y+12, r25	; 0x0c
    177c:	ad 87       	std	Y+13, r26	; 0x0d
    177e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a e7       	ldi	r20, 0x7A	; 122
    178e:	55 e4       	ldi	r21, 0x45	; 69
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8f 83       	std	Y+7, r24	; 0x07
    179a:	98 87       	std	Y+8, r25	; 0x08
    179c:	a9 87       	std	Y+9, r26	; 0x09
    179e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_init+0x7a>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_init+0xf8>
	else if (__tmp > 65535)
    17c2:	6f 81       	ldd	r22, Y+7	; 0x07
    17c4:	78 85       	ldd	r23, Y+8	; 0x08
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_init+0xda>
    1804:	80 e9       	ldi	r24, 0x90	; 144
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_init+0xc8>
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_init+0xbc>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_init+0x104>
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	63 e0       	ldi	r22, 0x03	; 3
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	65 e0       	ldi	r22, 0x05	; 5
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	66 e0       	ldi	r22, 0x06	; 6
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    187c:	83 e3       	ldi	r24, 0x33	; 51
    187e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1882:	82 e3       	ldi	r24, 0x32	; 50
    1884:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1888:	88 e2       	ldi	r24, 0x28	; 40
    188a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>
}
    189a:	2e 96       	adiw	r28, 0x0e	; 14
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	c3 56       	subi	r28, 0x63	; 99
    18ba:	d0 40       	sbci	r29, 0x00	; 0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 59       	subi	r30, 0x9D	; 157
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    18d8:	fe 01       	movw	r30, r28
    18da:	e1 5a       	subi	r30, 0xA1	; 161
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 e8       	ldi	r26, 0x80	; 128
    18e4:	bf e3       	ldi	r27, 0x3F	; 63
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	8e 01       	movw	r16, r28
    18f0:	05 5a       	subi	r16, 0xA5	; 165
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	fe 01       	movw	r30, r28
    18f6:	e1 5a       	subi	r30, 0xA1	; 161
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a e7       	ldi	r20, 0x7A	; 122
    1908:	55 e4       	ldi	r21, 0x45	; 69
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	a2 83       	std	Z+2, r26	; 0x02
    191a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191c:	fe 01       	movw	r30, r28
    191e:	e5 5a       	subi	r30, 0xA5	; 165
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	44 f4       	brge	.+16     	; 0x194a <LCD_sendCommand+0x9e>
		__ticks = 1;
    193a:	fe 01       	movw	r30, r28
    193c:	e7 5a       	subi	r30, 0xA7	; 167
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	64 c0       	rjmp	.+200    	; 0x1a12 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    194a:	fe 01       	movw	r30, r28
    194c:	e5 5a       	subi	r30, 0xA5	; 165
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	0c f0       	brlt	.+2      	; 0x196a <LCD_sendCommand+0xbe>
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	fe 01       	movw	r30, r28
    196c:	e1 5a       	subi	r30, 0xA1	; 161
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8e 01       	movw	r16, r28
    198a:	07 5a       	subi	r16, 0xA7	; 167
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
    19a0:	1f c0       	rjmp	.+62     	; 0x19e0 <LCD_sendCommand+0x134>
    19a2:	fe 01       	movw	r30, r28
    19a4:	e9 5a       	subi	r30, 0xA9	; 169
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 e9       	ldi	r24, 0x90	; 144
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
    19b0:	fe 01       	movw	r30, r28
    19b2:	e9 5a       	subi	r30, 0xA9	; 169
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_sendCommand+0x10e>
    19be:	fe 01       	movw	r30, r28
    19c0:	e9 5a       	subi	r30, 0xA9	; 169
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	de 01       	movw	r26, r28
    19ca:	a7 5a       	subi	r26, 0xA7	; 167
    19cc:	bf 4f       	sbci	r27, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	e7 5a       	subi	r30, 0xA7	; 167
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	9c 93       	st	X, r25
    19de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 5a       	subi	r30, 0xA7	; 167
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	d1 f6       	brne	.-76     	; 0x19a2 <LCD_sendCommand+0xf6>
    19ee:	27 c0       	rjmp	.+78     	; 0x1a3e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	8e 01       	movw	r16, r28
    19f2:	07 5a       	subi	r16, 0xA7	; 167
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	e5 5a       	subi	r30, 0xA5	; 165
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	de 01       	movw	r26, r28
    1a14:	ab 5a       	subi	r26, 0xAB	; 171
    1a16:	bf 4f       	sbci	r27, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e7 5a       	subi	r30, 0xA7	; 167
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	8d 93       	st	X+, r24
    1a24:	9c 93       	st	X, r25
    1a26:	fe 01       	movw	r30, r28
    1a28:	eb 5a       	subi	r30, 0xAB	; 171
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_sendCommand+0x184>
    1a34:	fe 01       	movw	r30, r28
    1a36:	eb 5a       	subi	r30, 0xAB	; 171
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	62 e0       	ldi	r22, 0x02	; 2
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 5a       	subi	r30, 0xAF	; 175
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	80 83       	st	Z, r24
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	a2 83       	std	Z+2, r26	; 0x02
    1a5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	8e 01       	movw	r16, r28
    1a60:	03 5b       	subi	r16, 0xB3	; 179
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	ef 5a       	subi	r30, 0xAF	; 175
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a e7       	ldi	r20, 0x7A	; 122
    1a78:	55 e4       	ldi	r21, 0x45	; 69
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e3 5b       	subi	r30, 0xB3	; 179
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	44 f4       	brge	.+16     	; 0x1aba <LCD_sendCommand+0x20e>
		__ticks = 1;
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e5 5b       	subi	r30, 0xB5	; 181
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	64 c0       	rjmp	.+200    	; 0x1b82 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e3 5b       	subi	r30, 0xB3	; 179
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <LCD_sendCommand+0x22e>
    1ad8:	43 c0       	rjmp	.+134    	; 0x1b60 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	fe 01       	movw	r30, r28
    1adc:	ef 5a       	subi	r30, 0xAF	; 175
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8e 01       	movw	r16, r28
    1afa:	05 5b       	subi	r16, 0xB5	; 181
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	1f c0       	rjmp	.+62     	; 0x1b50 <LCD_sendCommand+0x2a4>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e7 5b       	subi	r30, 0xB7	; 183
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 e9       	ldi	r24, 0x90	; 144
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
    1b20:	fe 01       	movw	r30, r28
    1b22:	e7 5b       	subi	r30, 0xB7	; 183
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0x27e>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e7 5b       	subi	r30, 0xB7	; 183
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	de 01       	movw	r26, r28
    1b3a:	a5 5b       	subi	r26, 0xB5	; 181
    1b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e5 5b       	subi	r30, 0xB5	; 181
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	9c 93       	st	X, r25
    1b4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	fe 01       	movw	r30, r28
    1b52:	e5 5b       	subi	r30, 0xB5	; 181
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	d1 f6       	brne	.-76     	; 0x1b12 <LCD_sendCommand+0x266>
    1b5e:	27 c0       	rjmp	.+78     	; 0x1bae <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	8e 01       	movw	r16, r28
    1b62:	05 5b       	subi	r16, 0xB5	; 181
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	e3 5b       	subi	r30, 0xB3	; 179
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	de 01       	movw	r26, r28
    1b84:	a9 5b       	subi	r26, 0xB9	; 185
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e5 5b       	subi	r30, 0xB5	; 181
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	8d 93       	st	X+, r24
    1b94:	9c 93       	st	X, r25
    1b96:	fe 01       	movw	r30, r28
    1b98:	e9 5b       	subi	r30, 0xB9	; 185
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_sendCommand+0x2f4>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e9 5b       	subi	r30, 0xB9	; 185
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ed 59       	subi	r30, 0x9D	; 157
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	80 71       	andi	r24, 0x10	; 16
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	95 95       	asr	r25
    1bc0:	87 95       	ror	r24
    1bc2:	95 95       	asr	r25
    1bc4:	87 95       	ror	r24
    1bc6:	95 95       	asr	r25
    1bc8:	87 95       	ror	r24
    1bca:	95 95       	asr	r25
    1bcc:	87 95       	ror	r24
    1bce:	98 2f       	mov	r25, r24
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	63 e0       	ldi	r22, 0x03	; 3
    1bd4:	49 2f       	mov	r20, r25
    1bd6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ed 59       	subi	r30, 0x9D	; 157
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	80 72       	andi	r24, 0x20	; 32
    1be8:	90 70       	andi	r25, 0x00	; 0
    1bea:	95 95       	asr	r25
    1bec:	87 95       	ror	r24
    1bee:	95 95       	asr	r25
    1bf0:	87 95       	ror	r24
    1bf2:	95 95       	asr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	95 95       	asr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	95 95       	asr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	98 2f       	mov	r25, r24
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	64 e0       	ldi	r22, 0x04	; 4
    1c04:	49 2f       	mov	r20, r25
    1c06:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ed 59       	subi	r30, 0x9D	; 157
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	80 74       	andi	r24, 0x40	; 64
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	08 2e       	mov	r0, r24
    1c1c:	89 2f       	mov	r24, r25
    1c1e:	00 0c       	add	r0, r0
    1c20:	88 1f       	adc	r24, r24
    1c22:	99 0b       	sbc	r25, r25
    1c24:	00 0c       	add	r0, r0
    1c26:	88 1f       	adc	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	65 e0       	ldi	r22, 0x05	; 5
    1c30:	49 2f       	mov	r20, r25
    1c32:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 59       	subi	r30, 0x9D	; 157
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	98 2f       	mov	r25, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	99 27       	eor	r25, r25
    1c44:	99 1f       	adc	r25, r25
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	66 e0       	ldi	r22, 0x06	; 6
    1c4a:	49 2f       	mov	r20, r25
    1c4c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    1c50:	fe 01       	movw	r30, r28
    1c52:	ed 5b       	subi	r30, 0xBD	; 189
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	80 83       	st	Z, r24
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	a2 83       	std	Z+2, r26	; 0x02
    1c64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	8e 01       	movw	r16, r28
    1c68:	01 5c       	subi	r16, 0xC1	; 193
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ed 5b       	subi	r30, 0xBD	; 189
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a e7       	ldi	r20, 0x7A	; 122
    1c80:	55 e4       	ldi	r21, 0x45	; 69
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	80 83       	st	Z, r24
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	a2 83       	std	Z+2, r26	; 0x02
    1c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c94:	fe 01       	movw	r30, r28
    1c96:	ff 96       	adiw	r30, 0x3f	; 63
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_sendCommand+0x40e>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9e af       	std	Y+62, r25	; 0x3e
    1cb6:	8d af       	std	Y+61, r24	; 0x3d
    1cb8:	46 c0       	rjmp	.+140    	; 0x1d46 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ff 96       	adiw	r30, 0x3f	; 63
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	64 f5       	brge	.+88     	; 0x1d2e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ed 5b       	subi	r30, 0xBD	; 189
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9e af       	std	Y+62, r25	; 0x3e
    1d02:	8d af       	std	Y+61, r24	; 0x3d
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_sendCommand+0x478>
    1d06:	80 e9       	ldi	r24, 0x90	; 144
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	9c af       	std	Y+60, r25	; 0x3c
    1d0c:	8b af       	std	Y+59, r24	; 0x3b
    1d0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d10:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_sendCommand+0x466>
    1d16:	9c af       	std	Y+60, r25	; 0x3c
    1d18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9e af       	std	Y+62, r25	; 0x3e
    1d22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_sendCommand+0x45a>
    1d2c:	16 c0       	rjmp	.+44     	; 0x1d5a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ff 96       	adiw	r30, 0x3f	; 63
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e af       	std	Y+62, r25	; 0x3e
    1d44:	8d af       	std	Y+61, r24	; 0x3d
    1d46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d4a:	9a af       	std	Y+58, r25	; 0x3a
    1d4c:	89 af       	std	Y+57, r24	; 0x39
    1d4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_sendCommand+0x4a6>
    1d56:	9a af       	std	Y+58, r25	; 0x3a
    1d58:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	8d ab       	std	Y+53, r24	; 0x35
    1d6e:	9e ab       	std	Y+54, r25	; 0x36
    1d70:	af ab       	std	Y+55, r26	; 0x37
    1d72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6d a9       	ldd	r22, Y+53	; 0x35
    1d76:	7e a9       	ldd	r23, Y+54	; 0x36
    1d78:	8f a9       	ldd	r24, Y+55	; 0x37
    1d7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a e7       	ldi	r20, 0x7A	; 122
    1d82:	55 e4       	ldi	r21, 0x45	; 69
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	89 ab       	std	Y+49, r24	; 0x31
    1d8e:	9a ab       	std	Y+50, r25	; 0x32
    1d90:	ab ab       	std	Y+51, r26	; 0x33
    1d92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	98 ab       	std	Y+48, r25	; 0x30
    1db2:	8f a7       	std	Y+47, r24	; 0x2f
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1db6:	69 a9       	ldd	r22, Y+49	; 0x31
    1db8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dba:	8b a9       	ldd	r24, Y+51	; 0x33
    1dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	98 ab       	std	Y+48, r25	; 0x30
    1df4:	8f a7       	std	Y+47, r24	; 0x2f
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <LCD_sendCommand+0x56a>
    1df8:	80 e9       	ldi	r24, 0x90	; 144
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	9e a7       	std	Y+46, r25	; 0x2e
    1dfe:	8d a7       	std	Y+45, r24	; 0x2d
    1e00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_sendCommand+0x558>
    1e08:	9e a7       	std	Y+46, r25	; 0x2e
    1e0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	98 ab       	std	Y+48, r25	; 0x30
    1e14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e18:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <LCD_sendCommand+0x54c>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	69 a9       	ldd	r22, Y+49	; 0x31
    1e22:	7a a9       	ldd	r23, Y+50	; 0x32
    1e24:	8b a9       	ldd	r24, Y+51	; 0x33
    1e26:	9c a9       	ldd	r25, Y+52	; 0x34
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	98 ab       	std	Y+48, r25	; 0x30
    1e32:	8f a7       	std	Y+47, r24	; 0x2f
    1e34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e36:	98 a9       	ldd	r25, Y+48	; 0x30
    1e38:	9c a7       	std	Y+44, r25	; 0x2c
    1e3a:	8b a7       	std	Y+43, r24	; 0x2b
    1e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_sendCommand+0x594>
    1e44:	9c a7       	std	Y+44, r25	; 0x2c
    1e46:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e8       	ldi	r26, 0x80	; 128
    1e58:	bf e3       	ldi	r27, 0x3F	; 63
    1e5a:	8f a3       	std	Y+39, r24	; 0x27
    1e5c:	98 a7       	std	Y+40, r25	; 0x28
    1e5e:	a9 a7       	std	Y+41, r26	; 0x29
    1e60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	6f a1       	ldd	r22, Y+39	; 0x27
    1e64:	78 a5       	ldd	r23, Y+40	; 0x28
    1e66:	89 a5       	ldd	r24, Y+41	; 0x29
    1e68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a e7       	ldi	r20, 0x7A	; 122
    1e70:	55 e4       	ldi	r21, 0x45	; 69
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8b a3       	std	Y+35, r24	; 0x23
    1e7c:	9c a3       	std	Y+36, r25	; 0x24
    1e7e:	ad a3       	std	Y+37, r26	; 0x25
    1e80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f e3       	ldi	r21, 0x3F	; 63
    1e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	2c f4       	brge	.+10     	; 0x1ea4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9a a3       	std	Y+34, r25	; 0x22
    1ea0:	89 a3       	std	Y+33, r24	; 0x21
    1ea2:	3f c0       	rjmp	.+126    	; 0x1f22 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	4c f5       	brge	.+82     	; 0x1f0e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ebe:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9a a3       	std	Y+34, r25	; 0x22
    1ee2:	89 a3       	std	Y+33, r24	; 0x21
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <LCD_sendCommand+0x658>
    1ee6:	80 e9       	ldi	r24, 0x90	; 144
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	98 a3       	std	Y+32, r25	; 0x20
    1eec:	8f 8f       	std	Y+31, r24	; 0x1f
    1eee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_sendCommand+0x646>
    1ef6:	98 a3       	std	Y+32, r25	; 0x20
    1ef8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	9a a1       	ldd	r25, Y+34	; 0x22
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9a a3       	std	Y+34, r25	; 0x22
    1f02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <LCD_sendCommand+0x63a>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f10:	7c a1       	ldd	r23, Y+36	; 0x24
    1f12:	8d a1       	ldd	r24, Y+37	; 0x25
    1f14:	9e a1       	ldd	r25, Y+38	; 0x26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9a a3       	std	Y+34, r25	; 0x22
    1f20:	89 a3       	std	Y+33, r24	; 0x21
    1f22:	89 a1       	ldd	r24, Y+33	; 0x21
    1f24:	9a a1       	ldd	r25, Y+34	; 0x22
    1f26:	9e 8f       	std	Y+30, r25	; 0x1e
    1f28:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_sendCommand+0x682>
    1f32:	9e 8f       	std	Y+30, r25	; 0x1e
    1f34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1f36:	fe 01       	movw	r30, r28
    1f38:	ed 59       	subi	r30, 0x9D	; 157
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	98 2f       	mov	r25, r24
    1f40:	91 70       	andi	r25, 0x01	; 1
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	63 e0       	ldi	r22, 0x03	; 3
    1f46:	49 2f       	mov	r20, r25
    1f48:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ed 59       	subi	r30, 0x9D	; 157
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	82 70       	andi	r24, 0x02	; 2
    1f5a:	90 70       	andi	r25, 0x00	; 0
    1f5c:	95 95       	asr	r25
    1f5e:	87 95       	ror	r24
    1f60:	98 2f       	mov	r25, r24
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	64 e0       	ldi	r22, 0x04	; 4
    1f66:	49 2f       	mov	r20, r25
    1f68:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ed 59       	subi	r30, 0x9D	; 157
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	84 70       	andi	r24, 0x04	; 4
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	95 95       	asr	r25
    1f7e:	87 95       	ror	r24
    1f80:	95 95       	asr	r25
    1f82:	87 95       	ror	r24
    1f84:	98 2f       	mov	r25, r24
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	65 e0       	ldi	r22, 0x05	; 5
    1f8a:	49 2f       	mov	r20, r25
    1f8c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1f90:	fe 01       	movw	r30, r28
    1f92:	ed 59       	subi	r30, 0x9D	; 157
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	88 70       	andi	r24, 0x08	; 8
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	95 95       	asr	r25
    1fa2:	87 95       	ror	r24
    1fa4:	95 95       	asr	r25
    1fa6:	87 95       	ror	r24
    1fa8:	95 95       	asr	r25
    1faa:	87 95       	ror	r24
    1fac:	98 2f       	mov	r25, r24
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	66 e0       	ldi	r22, 0x06	; 6
    1fb2:	49 2f       	mov	r20, r25
    1fb4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	89 8f       	std	Y+25, r24	; 0x19
    1fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a e7       	ldi	r20, 0x7A	; 122
    1fd6:	55 e4       	ldi	r21, 0x45	; 69
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8d 8b       	std	Y+21, r24	; 0x15
    1fe2:	9e 8b       	std	Y+22, r25	; 0x16
    1fe4:	af 8b       	std	Y+23, r26	; 0x17
    1fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fea:	7e 89       	ldd	r23, Y+22	; 0x16
    1fec:	8f 89       	ldd	r24, Y+23	; 0x17
    1fee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <LCD_sendCommand+0x75e>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9c 8b       	std	Y+20, r25	; 0x14
    2006:	8b 8b       	std	Y+19, r24	; 0x13
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9c 8b       	std	Y+20, r25	; 0x14
    2048:	8b 8b       	std	Y+19, r24	; 0x13
    204a:	0f c0       	rjmp	.+30     	; 0x206a <LCD_sendCommand+0x7be>
    204c:	80 e9       	ldi	r24, 0x90	; 144
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	9a 8b       	std	Y+18, r25	; 0x12
    2052:	89 8b       	std	Y+17, r24	; 0x11
    2054:	89 89       	ldd	r24, Y+17	; 0x11
    2056:	9a 89       	ldd	r25, Y+18	; 0x12
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_sendCommand+0x7ac>
    205c:	9a 8b       	std	Y+18, r25	; 0x12
    205e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8b 89       	ldd	r24, Y+19	; 0x13
    2062:	9c 89       	ldd	r25, Y+20	; 0x14
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <LCD_sendCommand+0x7a0>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
    2088:	8b 89       	ldd	r24, Y+19	; 0x13
    208a:	9c 89       	ldd	r25, Y+20	; 0x14
    208c:	98 8b       	std	Y+16, r25	; 0x10
    208e:	8f 87       	std	Y+15, r24	; 0x0f
    2090:	8f 85       	ldd	r24, Y+15	; 0x0f
    2092:	98 89       	ldd	r25, Y+16	; 0x10
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_sendCommand+0x7e8>
    2098:	98 8b       	std	Y+16, r25	; 0x10
    209a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	62 e0       	ldi	r22, 0x02	; 2
    20a0:	40 e0       	ldi	r20, 0x00	; 0
    20a2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 e8       	ldi	r26, 0x80	; 128
    20ac:	bf e3       	ldi	r27, 0x3F	; 63
    20ae:	8b 87       	std	Y+11, r24	; 0x0b
    20b0:	9c 87       	std	Y+12, r25	; 0x0c
    20b2:	ad 87       	std	Y+13, r26	; 0x0d
    20b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a e7       	ldi	r20, 0x7A	; 122
    20c4:	55 e4       	ldi	r21, 0x45	; 69
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8f 83       	std	Y+7, r24	; 0x07
    20d0:	98 87       	std	Y+8, r25	; 0x08
    20d2:	a9 87       	std	Y+9, r26	; 0x09
    20d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	3f c0       	rjmp	.+126    	; 0x2176 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	4c f5       	brge	.+82     	; 0x2162 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	6b 85       	ldd	r22, Y+11	; 0x0b
    2112:	7c 85       	ldd	r23, Y+12	; 0x0c
    2114:	8d 85       	ldd	r24, Y+13	; 0x0d
    2116:	9e 85       	ldd	r25, Y+14	; 0x0e
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <LCD_sendCommand+0x8ac>
    213a:	80 e9       	ldi	r24, 0x90	; 144
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_sendCommand+0x89a>
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <LCD_sendCommand+0x88e>
    2160:	14 c0       	rjmp	.+40     	; 0x218a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_sendCommand+0x8d6>
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    218a:	cd 59       	subi	r28, 0x9D	; 157
    218c:	df 4f       	sbci	r29, 0xFF	; 255
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	c3 56       	subi	r28, 0x63	; 99
    21b0:	d0 40       	sbci	r29, 0x00	; 0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	fe 01       	movw	r30, r28
    21be:	ed 59       	subi	r30, 0x9D	; 157
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    21ce:	fe 01       	movw	r30, r28
    21d0:	e1 5a       	subi	r30, 0xA1	; 161
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e8       	ldi	r26, 0x80	; 128
    21da:	bf e3       	ldi	r27, 0x3F	; 63
    21dc:	80 83       	st	Z, r24
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	a2 83       	std	Z+2, r26	; 0x02
    21e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	8e 01       	movw	r16, r28
    21e6:	05 5a       	subi	r16, 0xA5	; 165
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	fe 01       	movw	r30, r28
    21ec:	e1 5a       	subi	r30, 0xA1	; 161
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	55 e4       	ldi	r21, 0x45	; 69
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	80 83       	st	Z, r24
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	a2 83       	std	Z+2, r26	; 0x02
    2210:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2212:	fe 01       	movw	r30, r28
    2214:	e5 5a       	subi	r30, 0xA5	; 165
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	44 f4       	brge	.+16     	; 0x2240 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2230:	fe 01       	movw	r30, r28
    2232:	e7 5a       	subi	r30, 0xA7	; 167
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
    223e:	64 c0       	rjmp	.+200    	; 0x2308 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2240:	fe 01       	movw	r30, r28
    2242:	e5 5a       	subi	r30, 0xA5	; 165
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <LCD_displayCharacter+0xbe>
    225e:	43 c0       	rjmp	.+134    	; 0x22e6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	fe 01       	movw	r30, r28
    2262:	e1 5a       	subi	r30, 0xA1	; 161
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	60 81       	ld	r22, Z
    2268:	71 81       	ldd	r23, Z+1	; 0x01
    226a:	82 81       	ldd	r24, Z+2	; 0x02
    226c:	93 81       	ldd	r25, Z+3	; 0x03
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8e 01       	movw	r16, r28
    2280:	07 5a       	subi	r16, 0xA7	; 167
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	f8 01       	movw	r30, r16
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
    2296:	1f c0       	rjmp	.+62     	; 0x22d6 <LCD_displayCharacter+0x134>
    2298:	fe 01       	movw	r30, r28
    229a:	e9 5a       	subi	r30, 0xA9	; 169
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 e9       	ldi	r24, 0x90	; 144
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
    22a6:	fe 01       	movw	r30, r28
    22a8:	e9 5a       	subi	r30, 0xA9	; 169
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_displayCharacter+0x10e>
    22b4:	fe 01       	movw	r30, r28
    22b6:	e9 5a       	subi	r30, 0xA9	; 169
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	de 01       	movw	r26, r28
    22c0:	a7 5a       	subi	r26, 0xA7	; 167
    22c2:	bf 4f       	sbci	r27, 0xFF	; 255
    22c4:	fe 01       	movw	r30, r28
    22c6:	e7 5a       	subi	r30, 0xA7	; 167
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	11 96       	adiw	r26, 0x01	; 1
    22d2:	9c 93       	st	X, r25
    22d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d6:	fe 01       	movw	r30, r28
    22d8:	e7 5a       	subi	r30, 0xA7	; 167
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	d1 f6       	brne	.-76     	; 0x2298 <LCD_displayCharacter+0xf6>
    22e4:	27 c0       	rjmp	.+78     	; 0x2334 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	8e 01       	movw	r16, r28
    22e8:	07 5a       	subi	r16, 0xA7	; 167
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	fe 01       	movw	r30, r28
    22ee:	e5 5a       	subi	r30, 0xA5	; 165
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	f8 01       	movw	r30, r16
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
    2308:	de 01       	movw	r26, r28
    230a:	ab 5a       	subi	r26, 0xAB	; 171
    230c:	bf 4f       	sbci	r27, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	e7 5a       	subi	r30, 0xA7	; 167
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	8d 93       	st	X+, r24
    231a:	9c 93       	st	X, r25
    231c:	fe 01       	movw	r30, r28
    231e:	eb 5a       	subi	r30, 0xAB	; 171
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_displayCharacter+0x184>
    232a:	fe 01       	movw	r30, r28
    232c:	eb 5a       	subi	r30, 0xAB	; 171
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    233e:	fe 01       	movw	r30, r28
    2340:	ef 5a       	subi	r30, 0xAF	; 175
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e8       	ldi	r26, 0x80	; 128
    234a:	bf e3       	ldi	r27, 0x3F	; 63
    234c:	80 83       	st	Z, r24
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	a2 83       	std	Z+2, r26	; 0x02
    2352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	8e 01       	movw	r16, r28
    2356:	03 5b       	subi	r16, 0xB3	; 179
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	ef 5a       	subi	r30, 0xAF	; 175
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a e7       	ldi	r20, 0x7A	; 122
    236e:	55 e4       	ldi	r21, 0x45	; 69
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	f8 01       	movw	r30, r16
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2382:	fe 01       	movw	r30, r28
    2384:	e3 5b       	subi	r30, 0xB3	; 179
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	44 f4       	brge	.+16     	; 0x23b0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    23a0:	fe 01       	movw	r30, r28
    23a2:	e5 5b       	subi	r30, 0xB5	; 181
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	64 c0       	rjmp	.+200    	; 0x2478 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e3 5b       	subi	r30, 0xB3	; 179
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	0c f0       	brlt	.+2      	; 0x23d0 <LCD_displayCharacter+0x22e>
    23ce:	43 c0       	rjmp	.+134    	; 0x2456 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	fe 01       	movw	r30, r28
    23d2:	ef 5a       	subi	r30, 0xAF	; 175
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	8e 01       	movw	r16, r28
    23f0:	05 5b       	subi	r16, 0xB5	; 181
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
    2406:	1f c0       	rjmp	.+62     	; 0x2446 <LCD_displayCharacter+0x2a4>
    2408:	fe 01       	movw	r30, r28
    240a:	e7 5b       	subi	r30, 0xB7	; 183
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 e9       	ldi	r24, 0x90	; 144
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	fe 01       	movw	r30, r28
    2418:	e7 5b       	subi	r30, 0xB7	; 183
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_displayCharacter+0x27e>
    2424:	fe 01       	movw	r30, r28
    2426:	e7 5b       	subi	r30, 0xB7	; 183
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	de 01       	movw	r26, r28
    2430:	a5 5b       	subi	r26, 0xB5	; 181
    2432:	bf 4f       	sbci	r27, 0xFF	; 255
    2434:	fe 01       	movw	r30, r28
    2436:	e5 5b       	subi	r30, 0xB5	; 181
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	11 96       	adiw	r26, 0x01	; 1
    2442:	9c 93       	st	X, r25
    2444:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	fe 01       	movw	r30, r28
    2448:	e5 5b       	subi	r30, 0xB5	; 181
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	d1 f6       	brne	.-76     	; 0x2408 <LCD_displayCharacter+0x266>
    2454:	27 c0       	rjmp	.+78     	; 0x24a4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	8e 01       	movw	r16, r28
    2458:	05 5b       	subi	r16, 0xB5	; 181
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e3 5b       	subi	r30, 0xB3	; 179
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	de 01       	movw	r26, r28
    247a:	a9 5b       	subi	r26, 0xB9	; 185
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	e5 5b       	subi	r30, 0xB5	; 181
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	8d 93       	st	X+, r24
    248a:	9c 93       	st	X, r25
    248c:	fe 01       	movw	r30, r28
    248e:	e9 5b       	subi	r30, 0xB9	; 185
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_displayCharacter+0x2f4>
    249a:	fe 01       	movw	r30, r28
    249c:	e9 5b       	subi	r30, 0xB9	; 185
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    24a4:	fe 01       	movw	r30, r28
    24a6:	ed 59       	subi	r30, 0x9D	; 157
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	80 71       	andi	r24, 0x10	; 16
    24b2:	90 70       	andi	r25, 0x00	; 0
    24b4:	95 95       	asr	r25
    24b6:	87 95       	ror	r24
    24b8:	95 95       	asr	r25
    24ba:	87 95       	ror	r24
    24bc:	95 95       	asr	r25
    24be:	87 95       	ror	r24
    24c0:	95 95       	asr	r25
    24c2:	87 95       	ror	r24
    24c4:	98 2f       	mov	r25, r24
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	63 e0       	ldi	r22, 0x03	; 3
    24ca:	49 2f       	mov	r20, r25
    24cc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 59       	subi	r30, 0x9D	; 157
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	80 72       	andi	r24, 0x20	; 32
    24de:	90 70       	andi	r25, 0x00	; 0
    24e0:	95 95       	asr	r25
    24e2:	87 95       	ror	r24
    24e4:	95 95       	asr	r25
    24e6:	87 95       	ror	r24
    24e8:	95 95       	asr	r25
    24ea:	87 95       	ror	r24
    24ec:	95 95       	asr	r25
    24ee:	87 95       	ror	r24
    24f0:	95 95       	asr	r25
    24f2:	87 95       	ror	r24
    24f4:	98 2f       	mov	r25, r24
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	64 e0       	ldi	r22, 0x04	; 4
    24fa:	49 2f       	mov	r20, r25
    24fc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2500:	fe 01       	movw	r30, r28
    2502:	ed 59       	subi	r30, 0x9D	; 157
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	80 74       	andi	r24, 0x40	; 64
    250e:	90 70       	andi	r25, 0x00	; 0
    2510:	08 2e       	mov	r0, r24
    2512:	89 2f       	mov	r24, r25
    2514:	00 0c       	add	r0, r0
    2516:	88 1f       	adc	r24, r24
    2518:	99 0b       	sbc	r25, r25
    251a:	00 0c       	add	r0, r0
    251c:	88 1f       	adc	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	98 2f       	mov	r25, r24
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	65 e0       	ldi	r22, 0x05	; 5
    2526:	49 2f       	mov	r20, r25
    2528:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    252c:	fe 01       	movw	r30, r28
    252e:	ed 59       	subi	r30, 0x9D	; 157
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	98 2f       	mov	r25, r24
    2536:	99 1f       	adc	r25, r25
    2538:	99 27       	eor	r25, r25
    253a:	99 1f       	adc	r25, r25
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	66 e0       	ldi	r22, 0x06	; 6
    2540:	49 2f       	mov	r20, r25
    2542:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    2546:	fe 01       	movw	r30, r28
    2548:	ed 5b       	subi	r30, 0xBD	; 189
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e8       	ldi	r26, 0x80	; 128
    2552:	bf e3       	ldi	r27, 0x3F	; 63
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	8e 01       	movw	r16, r28
    255e:	01 5c       	subi	r16, 0xC1	; 193
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	ed 5b       	subi	r30, 0xBD	; 189
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	55 e4       	ldi	r21, 0x45	; 69
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	f8 01       	movw	r30, r16
    2582:	80 83       	st	Z, r24
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	a2 83       	std	Z+2, r26	; 0x02
    2588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    258a:	fe 01       	movw	r30, r28
    258c:	ff 96       	adiw	r30, 0x3f	; 63
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e af       	std	Y+62, r25	; 0x3e
    25ac:	8d af       	std	Y+61, r24	; 0x3d
    25ae:	46 c0       	rjmp	.+140    	; 0x263c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    25b0:	fe 01       	movw	r30, r28
    25b2:	ff 96       	adiw	r30, 0x3f	; 63
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	64 f5       	brge	.+88     	; 0x2624 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 5b       	subi	r30, 0xBD	; 189
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e af       	std	Y+62, r25	; 0x3e
    25f8:	8d af       	std	Y+61, r24	; 0x3d
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <LCD_displayCharacter+0x478>
    25fc:	80 e9       	ldi	r24, 0x90	; 144
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	9c af       	std	Y+60, r25	; 0x3c
    2602:	8b af       	std	Y+59, r24	; 0x3b
    2604:	8b ad       	ldd	r24, Y+59	; 0x3b
    2606:	9c ad       	ldd	r25, Y+60	; 0x3c
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_displayCharacter+0x466>
    260c:	9c af       	std	Y+60, r25	; 0x3c
    260e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8d ad       	ldd	r24, Y+61	; 0x3d
    2612:	9e ad       	ldd	r25, Y+62	; 0x3e
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	9e af       	std	Y+62, r25	; 0x3e
    2618:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8d ad       	ldd	r24, Y+61	; 0x3d
    261c:	9e ad       	ldd	r25, Y+62	; 0x3e
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <LCD_displayCharacter+0x45a>
    2622:	16 c0       	rjmp	.+44     	; 0x2650 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	fe 01       	movw	r30, r28
    2626:	ff 96       	adiw	r30, 0x3f	; 63
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e af       	std	Y+62, r25	; 0x3e
    263a:	8d af       	std	Y+61, r24	; 0x3d
    263c:	8d ad       	ldd	r24, Y+61	; 0x3d
    263e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2640:	9a af       	std	Y+58, r25	; 0x3a
    2642:	89 af       	std	Y+57, r24	; 0x39
    2644:	89 ad       	ldd	r24, Y+57	; 0x39
    2646:	9a ad       	ldd	r25, Y+58	; 0x3a
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <LCD_displayCharacter+0x4a6>
    264c:	9a af       	std	Y+58, r25	; 0x3a
    264e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	62 e0       	ldi	r22, 0x02	; 2
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e8       	ldi	r26, 0x80	; 128
    2660:	bf e3       	ldi	r27, 0x3F	; 63
    2662:	8d ab       	std	Y+53, r24	; 0x35
    2664:	9e ab       	std	Y+54, r25	; 0x36
    2666:	af ab       	std	Y+55, r26	; 0x37
    2668:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266a:	6d a9       	ldd	r22, Y+53	; 0x35
    266c:	7e a9       	ldd	r23, Y+54	; 0x36
    266e:	8f a9       	ldd	r24, Y+55	; 0x37
    2670:	98 ad       	ldd	r25, Y+56	; 0x38
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a e7       	ldi	r20, 0x7A	; 122
    2678:	55 e4       	ldi	r21, 0x45	; 69
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	89 ab       	std	Y+49, r24	; 0x31
    2684:	9a ab       	std	Y+50, r25	; 0x32
    2686:	ab ab       	std	Y+51, r26	; 0x33
    2688:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    268a:	69 a9       	ldd	r22, Y+49	; 0x31
    268c:	7a a9       	ldd	r23, Y+50	; 0x32
    268e:	8b a9       	ldd	r24, Y+51	; 0x33
    2690:	9c a9       	ldd	r25, Y+52	; 0x34
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	2c f4       	brge	.+10     	; 0x26ac <LCD_displayCharacter+0x50a>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	98 ab       	std	Y+48, r25	; 0x30
    26a8:	8f a7       	std	Y+47, r24	; 0x2f
    26aa:	3f c0       	rjmp	.+126    	; 0x272a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    26ac:	69 a9       	ldd	r22, Y+49	; 0x31
    26ae:	7a a9       	ldd	r23, Y+50	; 0x32
    26b0:	8b a9       	ldd	r24, Y+51	; 0x33
    26b2:	9c a9       	ldd	r25, Y+52	; 0x34
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	4c f5       	brge	.+82     	; 0x2716 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	6d a9       	ldd	r22, Y+53	; 0x35
    26c6:	7e a9       	ldd	r23, Y+54	; 0x36
    26c8:	8f a9       	ldd	r24, Y+55	; 0x37
    26ca:	98 ad       	ldd	r25, Y+56	; 0x38
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	51 e4       	ldi	r21, 0x41	; 65
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	98 ab       	std	Y+48, r25	; 0x30
    26ea:	8f a7       	std	Y+47, r24	; 0x2f
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <LCD_displayCharacter+0x56a>
    26ee:	80 e9       	ldi	r24, 0x90	; 144
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	9e a7       	std	Y+46, r25	; 0x2e
    26f4:	8d a7       	std	Y+45, r24	; 0x2d
    26f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <LCD_displayCharacter+0x558>
    26fe:	9e a7       	std	Y+46, r25	; 0x2e
    2700:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2702:	8f a5       	ldd	r24, Y+47	; 0x2f
    2704:	98 a9       	ldd	r25, Y+48	; 0x30
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	98 ab       	std	Y+48, r25	; 0x30
    270a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270c:	8f a5       	ldd	r24, Y+47	; 0x2f
    270e:	98 a9       	ldd	r25, Y+48	; 0x30
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	69 f7       	brne	.-38     	; 0x26ee <LCD_displayCharacter+0x54c>
    2714:	14 c0       	rjmp	.+40     	; 0x273e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2716:	69 a9       	ldd	r22, Y+49	; 0x31
    2718:	7a a9       	ldd	r23, Y+50	; 0x32
    271a:	8b a9       	ldd	r24, Y+51	; 0x33
    271c:	9c a9       	ldd	r25, Y+52	; 0x34
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	98 ab       	std	Y+48, r25	; 0x30
    2728:	8f a7       	std	Y+47, r24	; 0x2f
    272a:	8f a5       	ldd	r24, Y+47	; 0x2f
    272c:	98 a9       	ldd	r25, Y+48	; 0x30
    272e:	9c a7       	std	Y+44, r25	; 0x2c
    2730:	8b a7       	std	Y+43, r24	; 0x2b
    2732:	8b a5       	ldd	r24, Y+43	; 0x2b
    2734:	9c a5       	ldd	r25, Y+44	; 0x2c
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <LCD_displayCharacter+0x594>
    273a:	9c a7       	std	Y+44, r25	; 0x2c
    273c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	bf e3       	ldi	r27, 0x3F	; 63
    2750:	8f a3       	std	Y+39, r24	; 0x27
    2752:	98 a7       	std	Y+40, r25	; 0x28
    2754:	a9 a7       	std	Y+41, r26	; 0x29
    2756:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6f a1       	ldd	r22, Y+39	; 0x27
    275a:	78 a5       	ldd	r23, Y+40	; 0x28
    275c:	89 a5       	ldd	r24, Y+41	; 0x29
    275e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a e7       	ldi	r20, 0x7A	; 122
    2766:	55 e4       	ldi	r21, 0x45	; 69
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8b a3       	std	Y+35, r24	; 0x23
    2772:	9c a3       	std	Y+36, r25	; 0x24
    2774:	ad a3       	std	Y+37, r26	; 0x25
    2776:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9a a3       	std	Y+34, r25	; 0x22
    2796:	89 a3       	std	Y+33, r24	; 0x21
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    279a:	6b a1       	ldd	r22, Y+35	; 0x23
    279c:	7c a1       	ldd	r23, Y+36	; 0x24
    279e:	8d a1       	ldd	r24, Y+37	; 0x25
    27a0:	9e a1       	ldd	r25, Y+38	; 0x26
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6f a1       	ldd	r22, Y+39	; 0x27
    27b4:	78 a5       	ldd	r23, Y+40	; 0x28
    27b6:	89 a5       	ldd	r24, Y+41	; 0x29
    27b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9a a3       	std	Y+34, r25	; 0x22
    27d8:	89 a3       	std	Y+33, r24	; 0x21
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <LCD_displayCharacter+0x658>
    27dc:	80 e9       	ldi	r24, 0x90	; 144
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	98 a3       	std	Y+32, r25	; 0x20
    27e2:	8f 8f       	std	Y+31, r24	; 0x1f
    27e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e6:	98 a1       	ldd	r25, Y+32	; 0x20
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_displayCharacter+0x646>
    27ec:	98 a3       	std	Y+32, r25	; 0x20
    27ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	89 a1       	ldd	r24, Y+33	; 0x21
    27f2:	9a a1       	ldd	r25, Y+34	; 0x22
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9a a3       	std	Y+34, r25	; 0x22
    27f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	89 a1       	ldd	r24, Y+33	; 0x21
    27fc:	9a a1       	ldd	r25, Y+34	; 0x22
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <LCD_displayCharacter+0x63a>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6b a1       	ldd	r22, Y+35	; 0x23
    2806:	7c a1       	ldd	r23, Y+36	; 0x24
    2808:	8d a1       	ldd	r24, Y+37	; 0x25
    280a:	9e a1       	ldd	r25, Y+38	; 0x26
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9a a3       	std	Y+34, r25	; 0x22
    2816:	89 a3       	std	Y+33, r24	; 0x21
    2818:	89 a1       	ldd	r24, Y+33	; 0x21
    281a:	9a a1       	ldd	r25, Y+34	; 0x22
    281c:	9e 8f       	std	Y+30, r25	; 0x1e
    281e:	8d 8f       	std	Y+29, r24	; 0x1d
    2820:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2822:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_displayCharacter+0x682>
    2828:	9e 8f       	std	Y+30, r25	; 0x1e
    282a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    282c:	fe 01       	movw	r30, r28
    282e:	ed 59       	subi	r30, 0x9D	; 157
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	98 2f       	mov	r25, r24
    2836:	91 70       	andi	r25, 0x01	; 1
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	63 e0       	ldi	r22, 0x03	; 3
    283c:	49 2f       	mov	r20, r25
    283e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2842:	fe 01       	movw	r30, r28
    2844:	ed 59       	subi	r30, 0x9D	; 157
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	82 70       	andi	r24, 0x02	; 2
    2850:	90 70       	andi	r25, 0x00	; 0
    2852:	95 95       	asr	r25
    2854:	87 95       	ror	r24
    2856:	98 2f       	mov	r25, r24
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	49 2f       	mov	r20, r25
    285e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2862:	fe 01       	movw	r30, r28
    2864:	ed 59       	subi	r30, 0x9D	; 157
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	84 70       	andi	r24, 0x04	; 4
    2870:	90 70       	andi	r25, 0x00	; 0
    2872:	95 95       	asr	r25
    2874:	87 95       	ror	r24
    2876:	95 95       	asr	r25
    2878:	87 95       	ror	r24
    287a:	98 2f       	mov	r25, r24
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	65 e0       	ldi	r22, 0x05	; 5
    2880:	49 2f       	mov	r20, r25
    2882:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2886:	fe 01       	movw	r30, r28
    2888:	ed 59       	subi	r30, 0x9D	; 157
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	88 70       	andi	r24, 0x08	; 8
    2894:	90 70       	andi	r25, 0x00	; 0
    2896:	95 95       	asr	r25
    2898:	87 95       	ror	r24
    289a:	95 95       	asr	r25
    289c:	87 95       	ror	r24
    289e:	95 95       	asr	r25
    28a0:	87 95       	ror	r24
    28a2:	98 2f       	mov	r25, r24
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	66 e0       	ldi	r22, 0x06	; 6
    28a8:	49 2f       	mov	r20, r25
    28aa:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a0 e8       	ldi	r26, 0x80	; 128
    28b4:	bf e3       	ldi	r27, 0x3F	; 63
    28b6:	89 8f       	std	Y+25, r24	; 0x19
    28b8:	9a 8f       	std	Y+26, r25	; 0x1a
    28ba:	ab 8f       	std	Y+27, r26	; 0x1b
    28bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28be:	69 8d       	ldd	r22, Y+25	; 0x19
    28c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a e7       	ldi	r20, 0x7A	; 122
    28cc:	55 e4       	ldi	r21, 0x45	; 69
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8d 8b       	std	Y+21, r24	; 0x15
    28d8:	9e 8b       	std	Y+22, r25	; 0x16
    28da:	af 8b       	std	Y+23, r26	; 0x17
    28dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28de:	6d 89       	ldd	r22, Y+21	; 0x15
    28e0:	7e 89       	ldd	r23, Y+22	; 0x16
    28e2:	8f 89       	ldd	r24, Y+23	; 0x17
    28e4:	98 8d       	ldd	r25, Y+24	; 0x18
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e8       	ldi	r20, 0x80	; 128
    28ec:	5f e3       	ldi	r21, 0x3F	; 63
    28ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f2:	88 23       	and	r24, r24
    28f4:	2c f4       	brge	.+10     	; 0x2900 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
    28fe:	3f c0       	rjmp	.+126    	; 0x297e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2900:	6d 89       	ldd	r22, Y+21	; 0x15
    2902:	7e 89       	ldd	r23, Y+22	; 0x16
    2904:	8f 89       	ldd	r24, Y+23	; 0x17
    2906:	98 8d       	ldd	r25, Y+24	; 0x18
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	3f ef       	ldi	r19, 0xFF	; 255
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	57 e4       	ldi	r21, 0x47	; 71
    2910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	4c f5       	brge	.+82     	; 0x296a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2918:	69 8d       	ldd	r22, Y+25	; 0x19
    291a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9c 8b       	std	Y+20, r25	; 0x14
    293e:	8b 8b       	std	Y+19, r24	; 0x13
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <LCD_displayCharacter+0x7be>
    2942:	80 e9       	ldi	r24, 0x90	; 144
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	9a 8b       	std	Y+18, r25	; 0x12
    2948:	89 8b       	std	Y+17, r24	; 0x11
    294a:	89 89       	ldd	r24, Y+17	; 0x11
    294c:	9a 89       	ldd	r25, Y+18	; 0x12
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <LCD_displayCharacter+0x7ac>
    2952:	9a 8b       	std	Y+18, r25	; 0x12
    2954:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	9c 8b       	std	Y+20, r25	; 0x14
    295e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2960:	8b 89       	ldd	r24, Y+19	; 0x13
    2962:	9c 89       	ldd	r25, Y+20	; 0x14
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	69 f7       	brne	.-38     	; 0x2942 <LCD_displayCharacter+0x7a0>
    2968:	14 c0       	rjmp	.+40     	; 0x2992 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296a:	6d 89       	ldd	r22, Y+21	; 0x15
    296c:	7e 89       	ldd	r23, Y+22	; 0x16
    296e:	8f 89       	ldd	r24, Y+23	; 0x17
    2970:	98 8d       	ldd	r25, Y+24	; 0x18
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9c 8b       	std	Y+20, r25	; 0x14
    297c:	8b 8b       	std	Y+19, r24	; 0x13
    297e:	8b 89       	ldd	r24, Y+19	; 0x13
    2980:	9c 89       	ldd	r25, Y+20	; 0x14
    2982:	98 8b       	std	Y+16, r25	; 0x10
    2984:	8f 87       	std	Y+15, r24	; 0x0f
    2986:	8f 85       	ldd	r24, Y+15	; 0x0f
    2988:	98 89       	ldd	r25, Y+16	; 0x10
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <LCD_displayCharacter+0x7e8>
    298e:	98 8b       	std	Y+16, r25	; 0x10
    2990:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	62 e0       	ldi	r22, 0x02	; 2
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e8       	ldi	r26, 0x80	; 128
    29a2:	bf e3       	ldi	r27, 0x3F	; 63
    29a4:	8b 87       	std	Y+11, r24	; 0x0b
    29a6:	9c 87       	std	Y+12, r25	; 0x0c
    29a8:	ad 87       	std	Y+13, r26	; 0x0d
    29aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a e7       	ldi	r20, 0x7A	; 122
    29ba:	55 e4       	ldi	r21, 0x45	; 69
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8f 83       	std	Y+7, r24	; 0x07
    29c6:	98 87       	std	Y+8, r25	; 0x08
    29c8:	a9 87       	std	Y+9, r26	; 0x09
    29ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <LCD_displayCharacter+0x84c>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <LCD_displayCharacter+0x8ac>
    2a30:	80 e9       	ldi	r24, 0x90	; 144
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_displayCharacter+0x89a>
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <LCD_displayCharacter+0x88e>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5a:	78 85       	ldd	r23, Y+8	; 0x08
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <LCD_displayCharacter+0x8d6>
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a80:	cd 59       	subi	r28, 0x9D	; 157
    2a82:	df 4f       	sbci	r29, 0xFF	; 255
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	08 95       	ret

00002a98 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <LCD_displayString+0x6>
    2a9e:	0f 92       	push	r0
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	9b 83       	std	Y+3, r25	; 0x03
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
    2aaa:	0e c0       	rjmp	.+28     	; 0x2ac8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e2 0f       	add	r30, r18
    2aba:	f3 1f       	adc	r31, r19
    2abc:	80 81       	ld	r24, Z
    2abe:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_displayCharacter>
		i++;
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e2 0f       	add	r30, r18
    2ad6:	f3 1f       	adc	r31, r19
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 23       	and	r24, r24
    2adc:	39 f7       	brne	.-50     	; 0x2aac <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <LCD_moveCursor+0x6>
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <LCD_moveCursor+0x8>
    2af2:	0f 92       	push	r0
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	8a 83       	std	Y+2, r24	; 0x02
    2afa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	3d 83       	std	Y+5, r19	; 0x05
    2b04:	2c 83       	std	Y+4, r18	; 0x04
    2b06:	8c 81       	ldd	r24, Y+4	; 0x04
    2b08:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	c1 f0       	breq	.+48     	; 0x2b40 <LCD_moveCursor+0x56>
    2b10:	2c 81       	ldd	r18, Y+4	; 0x04
    2b12:	3d 81       	ldd	r19, Y+5	; 0x05
    2b14:	22 30       	cpi	r18, 0x02	; 2
    2b16:	31 05       	cpc	r19, r1
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_moveCursor+0x3a>
    2b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	61 f0       	breq	.+24     	; 0x2b3a <LCD_moveCursor+0x50>
    2b22:	19 c0       	rjmp	.+50     	; 0x2b56 <LCD_moveCursor+0x6c>
    2b24:	2c 81       	ldd	r18, Y+4	; 0x04
    2b26:	3d 81       	ldd	r19, Y+5	; 0x05
    2b28:	22 30       	cpi	r18, 0x02	; 2
    2b2a:	31 05       	cpc	r19, r1
    2b2c:	69 f0       	breq	.+26     	; 0x2b48 <LCD_moveCursor+0x5e>
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	9d 81       	ldd	r25, Y+5	; 0x05
    2b32:	83 30       	cpi	r24, 0x03	; 3
    2b34:	91 05       	cpc	r25, r1
    2b36:	61 f0       	breq	.+24     	; 0x2b50 <LCD_moveCursor+0x66>
    2b38:	0e c0       	rjmp	.+28     	; 0x2b56 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	0b c0       	rjmp	.+22     	; 0x2b56 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	80 5c       	subi	r24, 0xC0	; 192
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	07 c0       	rjmp	.+14     	; 0x2b56 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	80 5f       	subi	r24, 0xF0	; 240
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	80 5b       	subi	r24, 0xB0	; 176
    2b54:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	80 68       	ori	r24, 0x80	; 128
    2b5a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <LCD_displayStringRowColumn+0x6>
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <LCD_displayStringRowColumn+0x8>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	6a 83       	std	Y+2, r22	; 0x02
    2b7e:	5c 83       	std	Y+4, r21	; 0x04
    2b80:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	6a 81       	ldd	r22, Y+2	; 0x02
    2b86:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_displayString>
}
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	62 97       	sbiw	r28, 0x12	; 18
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	9a 8b       	std	Y+18, r25	; 0x12
    2bb6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2bb8:	89 89       	ldd	r24, Y+17	; 0x11
    2bba:	9a 89       	ldd	r25, Y+18	; 0x12
    2bbc:	9e 01       	movw	r18, r28
    2bbe:	2f 5f       	subi	r18, 0xFF	; 255
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	4a e0       	ldi	r20, 0x0A	; 10
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	0e 94 68 19 	call	0x32d0	; 0x32d0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2bcc:	ce 01       	movw	r24, r28
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_displayString>
}
    2bd4:	62 96       	adiw	r28, 0x12	; 18
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_sendCommand>
}
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <carSensor>:
#include "ultrasonic.h"
#include "icu.h"
#include <util/delay.h>
#include <avr/io.h>
uint8 tooclose = 0;
void carSensor(void){
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	6e 97       	sbiw	r28, 0x1e	; 30
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
	uint16 distance = Ultrasonic_readDistance();
    2c0e:	0e 94 bf 18 	call	0x317e	; 0x317e <Ultrasonic_readDistance>
    2c12:	9e 8f       	std	Y+30, r25	; 0x1e
    2c14:	8d 8f       	std	Y+29, r24	; 0x1d




	if(tooclose == 0){
    2c16:	80 91 7c 01 	lds	r24, 0x017C
    2c1a:	88 23       	and	r24, r24
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <carSensor+0x26>
    2c1e:	87 c0       	rjmp	.+270    	; 0x2d2e <carSensor+0x134>
		if(distance<10){
    2c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c24:	8a 30       	cpi	r24, 0x0A	; 10
    2c26:	91 05       	cpc	r25, r1
    2c28:	c0 f4       	brcc	.+48     	; 0x2c5a <carSensor+0x60>
			LCD_displayStringRowColumn(0, 0, "Distance=");
    2c2a:	20 e6       	ldi	r18, 0x60	; 96
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	a9 01       	movw	r20, r18
    2c34:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_displayStringRowColumn>
			LCD_moveCursor(0,9);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	69 e0       	ldi	r22, 0x09	; 9
    2c3c:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_moveCursor>
			LCD_intgerToString(distance);
    2c40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c44:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_intgerToString>
			LCD_moveCursor(0,10);
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	6a e0       	ldi	r22, 0x0A	; 10
    2c4c:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_moveCursor>
			LCD_displayString(" ");
    2c50:	8a e6       	ldi	r24, 0x6A	; 106
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_displayString>
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <carSensor+0x7e>
		}
		else{
			LCD_displayStringRowColumn(0, 0, "Distance=");
    2c5a:	20 e6       	ldi	r18, 0x60	; 96
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	a9 01       	movw	r20, r18
    2c64:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_displayStringRowColumn>
						LCD_moveCursor(0,9);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	69 e0       	ldi	r22, 0x09	; 9
    2c6c:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_moveCursor>
						LCD_intgerToString(distance);
    2c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c74:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_intgerToString>

		}
		Buzzer_off();
    2c78:	0e 94 77 07 	call	0xeee	; 0xeee <Buzzer_off>
		if(distance<=5){
    2c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c80:	86 30       	cpi	r24, 0x06	; 6
    2c82:	91 05       	cpc	r25, r1
    2c84:	30 f4       	brcc	.+12     	; 0x2c92 <carSensor+0x98>
			tooclose = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	80 93 7c 01 	sts	0x017C, r24
			LCD_clearScreen();
    2c8c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <LCD_clearScreen>
    2c90:	5c c1       	rjmp	.+696    	; 0x2f4a <carSensor+0x350>
			return;
		}
		else if(distance>=6 && distance<=10){
    2c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c96:	86 30       	cpi	r24, 0x06	; 6
    2c98:	91 05       	cpc	r25, r1
    2c9a:	88 f0       	brcs	.+34     	; 0x2cbe <carSensor+0xc4>
    2c9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ca0:	8b 30       	cpi	r24, 0x0B	; 11
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	60 f4       	brcc	.+24     	; 0x2cbe <carSensor+0xc4>
			LED_on(LED_RED_PIN_ID);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
			LED_on(LED_BLUE_PIN_ID);
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
			LED_on(LED_GREEN_PIN_ID);
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
			Buzzer_off();
    2cb8:	0e 94 77 07 	call	0xeee	; 0xeee <Buzzer_off>
    2cbc:	46 c1       	rjmp	.+652    	; 0x2f4a <carSensor+0x350>
			return;
		}
		else if(distance>=11 && distance<=15){
    2cbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc2:	8b 30       	cpi	r24, 0x0B	; 11
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	88 f0       	brcs	.+34     	; 0x2cea <carSensor+0xf0>
    2cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ccc:	80 31       	cpi	r24, 0x10	; 16
    2cce:	91 05       	cpc	r25, r1
    2cd0:	60 f4       	brcc	.+24     	; 0x2cea <carSensor+0xf0>
			LED_on(LED_RED_PIN_ID);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
			LED_off(LED_BLUE_PIN_ID);
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
			LED_on(LED_GREEN_PIN_ID);
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
			Buzzer_off();
    2ce4:	0e 94 77 07 	call	0xeee	; 0xeee <Buzzer_off>
    2ce8:	30 c1       	rjmp	.+608    	; 0x2f4a <carSensor+0x350>
			return;
		}
		else if(distance>=16 && distance<=20){
    2cea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cee:	80 31       	cpi	r24, 0x10	; 16
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	88 f0       	brcs	.+34     	; 0x2d16 <carSensor+0x11c>
    2cf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cf8:	85 31       	cpi	r24, 0x15	; 21
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	60 f4       	brcc	.+24     	; 0x2d16 <carSensor+0x11c>
			LED_on(LED_RED_PIN_ID);
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
			LED_off(LED_BLUE_PIN_ID);
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
			LED_off(LED_GREEN_PIN_ID);
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
			Buzzer_off();
    2d10:	0e 94 77 07 	call	0xeee	; 0xeee <Buzzer_off>
    2d14:	1a c1       	rjmp	.+564    	; 0x2f4a <carSensor+0x350>
			return;
		}
		else{
			Buzzer_off();
    2d16:	0e 94 77 07 	call	0xeee	; 0xeee <Buzzer_off>
			LED_off(LED_RED_PIN_ID);
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
			LED_off(LED_BLUE_PIN_ID);
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
			LED_off(LED_GREEN_PIN_ID);
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
    2d2c:	0e c1       	rjmp	.+540    	; 0x2f4a <carSensor+0x350>
			return;
		}
	}
	else{
		distance = Ultrasonic_readDistance();
    2d2e:	0e 94 bf 18 	call	0x317e	; 0x317e <Ultrasonic_readDistance>
    2d32:	9e 8f       	std	Y+30, r25	; 0x1e
    2d34:	8d 8f       	std	Y+29, r24	; 0x1d
		if(distance <=5){
    2d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d3a:	86 30       	cpi	r24, 0x06	; 6
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <carSensor+0x148>
    2d40:	00 c1       	rjmp	.+512    	; 0x2f42 <carSensor+0x348>
			LCD_displayStringRowColumn(0,0,"STOP!");
    2d42:	2c e6       	ldi	r18, 0x6C	; 108
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	a9 01       	movw	r20, r18
    2d4c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_displayStringRowColumn>
					Buzzer_on();
    2d50:	0e 94 6b 07 	call	0xed6	; 0xed6 <Buzzer_on>
					LED_on(LED_RED_PIN_ID);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
					LED_on(LED_BLUE_PIN_ID);
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
					LED_on(LED_GREEN_PIN_ID);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	0e 94 3c 07 	call	0xe78	; 0xe78 <LED_on>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	af e2       	ldi	r26, 0x2F	; 47
    2d6c:	b4 e4       	ldi	r27, 0x44	; 68
    2d6e:	89 8f       	std	Y+25, r24	; 0x19
    2d70:	9a 8f       	std	Y+26, r25	; 0x1a
    2d72:	ab 8f       	std	Y+27, r26	; 0x1b
    2d74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	69 8d       	ldd	r22, Y+25	; 0x19
    2d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a e7       	ldi	r20, 0x7A	; 122
    2d84:	55 e4       	ldi	r21, 0x45	; 69
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8d 8b       	std	Y+21, r24	; 0x15
    2d90:	9e 8b       	std	Y+22, r25	; 0x16
    2d92:	af 8b       	std	Y+23, r26	; 0x17
    2d94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d96:	6d 89       	ldd	r22, Y+21	; 0x15
    2d98:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <carSensor+0x1be>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9c 8b       	std	Y+20, r25	; 0x14
    2db4:	8b 8b       	std	Y+19, r24	; 0x13
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <carSensor+0x23c>
	else if (__tmp > 65535)
    2db8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dba:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <carSensor+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9c 8b       	std	Y+20, r25	; 0x14
    2df6:	8b 8b       	std	Y+19, r24	; 0x13
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <carSensor+0x21e>
    2dfa:	80 e9       	ldi	r24, 0x90	; 144
    2dfc:	91 e0       	ldi	r25, 0x01	; 1
    2dfe:	9a 8b       	std	Y+18, r25	; 0x12
    2e00:	89 8b       	std	Y+17, r24	; 0x11
    2e02:	89 89       	ldd	r24, Y+17	; 0x11
    2e04:	9a 89       	ldd	r25, Y+18	; 0x12
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <carSensor+0x20c>
    2e0a:	9a 8b       	std	Y+18, r25	; 0x12
    2e0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e10:	9c 89       	ldd	r25, Y+20	; 0x14
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9c 8b       	std	Y+20, r25	; 0x14
    2e16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <carSensor+0x200>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <carSensor+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6d 89       	ldd	r22, Y+21	; 0x15
    2e24:	7e 89       	ldd	r23, Y+22	; 0x16
    2e26:	8f 89       	ldd	r24, Y+23	; 0x17
    2e28:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9c 8b       	std	Y+20, r25	; 0x14
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
    2e36:	8b 89       	ldd	r24, Y+19	; 0x13
    2e38:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3a:	98 8b       	std	Y+16, r25	; 0x10
    2e3c:	8f 87       	std	Y+15, r24	; 0x0f
    2e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e40:	98 89       	ldd	r25, Y+16	; 0x10
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <carSensor+0x248>
    2e46:	98 8b       	std	Y+16, r25	; 0x10
    2e48:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(700);
					LED_off(LED_RED_PIN_ID);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
					LED_off(LED_BLUE_PIN_ID);
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
					LED_off(LED_GREEN_PIN_ID);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	0e 94 4b 07 	call	0xe96	; 0xe96 <LED_off>
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	af e2       	ldi	r26, 0x2F	; 47
    2e62:	b4 e4       	ldi	r27, 0x44	; 68
    2e64:	8b 87       	std	Y+11, r24	; 0x0b
    2e66:	9c 87       	std	Y+12, r25	; 0x0c
    2e68:	ad 87       	std	Y+13, r26	; 0x0d
    2e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a e7       	ldi	r20, 0x7A	; 122
    2e7a:	55 e4       	ldi	r21, 0x45	; 69
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	8f 83       	std	Y+7, r24	; 0x07
    2e86:	98 87       	std	Y+8, r25	; 0x08
    2e88:	a9 87       	std	Y+9, r26	; 0x09
    2e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8e:	78 85       	ldd	r23, Y+8	; 0x08
    2e90:	89 85       	ldd	r24, Y+9	; 0x09
    2e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e8       	ldi	r20, 0x80	; 128
    2e9a:	5f e3       	ldi	r21, 0x3F	; 63
    2e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea0:	88 23       	and	r24, r24
    2ea2:	2c f4       	brge	.+10     	; 0x2eae <carSensor+0x2b4>
		__ticks = 1;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	3f c0       	rjmp	.+126    	; 0x2f2c <carSensor+0x332>
	else if (__tmp > 65535)
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	3f ef       	ldi	r19, 0xFF	; 255
    2eba:	4f e7       	ldi	r20, 0x7F	; 127
    2ebc:	57 e4       	ldi	r21, 0x47	; 71
    2ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec2:	18 16       	cp	r1, r24
    2ec4:	4c f5       	brge	.+82     	; 0x2f18 <carSensor+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e2       	ldi	r20, 0x20	; 32
    2ed4:	51 e4       	ldi	r21, 0x41	; 65
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	9e 83       	std	Y+6, r25	; 0x06
    2eec:	8d 83       	std	Y+5, r24	; 0x05
    2eee:	0f c0       	rjmp	.+30     	; 0x2f0e <carSensor+0x314>
    2ef0:	80 e9       	ldi	r24, 0x90	; 144
    2ef2:	91 e0       	ldi	r25, 0x01	; 1
    2ef4:	9c 83       	std	Y+4, r25	; 0x04
    2ef6:	8b 83       	std	Y+3, r24	; 0x03
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <carSensor+0x302>
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	69 f7       	brne	.-38     	; 0x2ef0 <carSensor+0x2f6>
    2f16:	19 c0       	rjmp	.+50     	; 0x2f4a <carSensor+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f18:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1a:	78 85       	ldd	r23, Y+8	; 0x08
    2f1c:	89 85       	ldd	r24, Y+9	; 0x09
    2f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <carSensor+0x33e>
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <carSensor+0x350>
					_delay_ms(700);
					return;
		}

		else{
			tooclose = 0;
    2f42:	10 92 7c 01 	sts	0x017C, r1
			LCD_clearScreen();
    2f46:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <LCD_clearScreen>
		}

	}
}
    2f4a:	6e 96       	adiw	r28, 0x1e	; 30
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <main>:




int main(void){
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
	LED_init();
    2f64:	0e 94 17 07 	call	0xe2e	; 0xe2e <LED_init>
	LCD_init();
    2f68:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LCD_init>
	Buzzer_init();
    2f6c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Buzzer_init>
	Ultrasonic_init();
    2f70:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <Ultrasonic_init>
	SREG |= (1<<7);
    2f74:	af e5       	ldi	r26, 0x5F	; 95
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ef e5       	ldi	r30, 0x5F	; 95
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	80 68       	ori	r24, 0x80	; 128
    2f80:	8c 93       	st	X, r24

	while(1){
		carSensor();
    2f82:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <carSensor>
    2f86:	fd cf       	rjmp	.-6      	; 0x2f82 <main+0x26>

00002f88 <Ultrasonic_init>:
#include <util/delay.h>
uint8 edge = 0;
uint16 echohigh = 0;
uint16 echolow = 0;
uint16 echofinal = 0;
void Ultrasonic_init(void){
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <Ultrasonic_init+0x6>
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62

	ICU_ConfigType ICU_config = {F_CPU_8,RAISING};
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&ICU_config);
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    2fa2:	8a ef       	ldi	r24, 0xFA	; 250
    2fa4:	98 e1       	ldi	r25, 0x18	; 24
    2fa6:	0e 94 3d 0b 	call	0x167a	; 0x167a <ICU_setCallBack>
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	67 e0       	ldi	r22, 0x07	; 7
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ULTRASONIC_ECHO_PORT_ID, ULTRASONIC_ECHO_PIN_ID, PIN_INPUT);
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	66 e0       	ldi	r22, 0x06	; 6
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	0e 94 83 07 	call	0xf06	; 0xf06 <GPIO_setupPinDirection>

}
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	08 95       	ret

00002fc8 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void){
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	68 97       	sbiw	r28, 0x18	; 24
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    2fde:	67 e0       	ldi	r22, 0x07	; 7
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a0 e2       	ldi	r26, 0x20	; 32
    2fec:	b1 e4       	ldi	r27, 0x41	; 65
    2fee:	8d 8b       	std	Y+21, r24	; 0x15
    2ff0:	9e 8b       	std	Y+22, r25	; 0x16
    2ff2:	af 8b       	std	Y+23, r26	; 0x17
    2ff4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffe:	2b ea       	ldi	r18, 0xAB	; 171
    3000:	3a ea       	ldi	r19, 0xAA	; 170
    3002:	4a ea       	ldi	r20, 0xAA	; 170
    3004:	50 e4       	ldi	r21, 0x40	; 64
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	89 8b       	std	Y+17, r24	; 0x11
    3010:	9a 8b       	std	Y+18, r25	; 0x12
    3012:	ab 8b       	std	Y+19, r26	; 0x13
    3014:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3016:	69 89       	ldd	r22, Y+17	; 0x11
    3018:	7a 89       	ldd	r23, Y+18	; 0x12
    301a:	8b 89       	ldd	r24, Y+19	; 0x13
    301c:	9c 89       	ldd	r25, Y+20	; 0x14
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	1c f4       	brge	.+6      	; 0x3034 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	88 8b       	std	Y+16, r24	; 0x10
    3032:	91 c0       	rjmp	.+290    	; 0x3156 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    3034:	69 89       	ldd	r22, Y+17	; 0x11
    3036:	7a 89       	ldd	r23, Y+18	; 0x12
    3038:	8b 89       	ldd	r24, Y+19	; 0x13
    303a:	9c 89       	ldd	r25, Y+20	; 0x14
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	53 e4       	ldi	r21, 0x43	; 67
    3044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	0c f0       	brlt	.+2      	; 0x304e <Ultrasonic_Trigger+0x86>
    304c:	7b c0       	rjmp	.+246    	; 0x3144 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    304e:	6d 89       	ldd	r22, Y+21	; 0x15
    3050:	7e 89       	ldd	r23, Y+22	; 0x16
    3052:	8f 89       	ldd	r24, Y+23	; 0x17
    3054:	98 8d       	ldd	r25, Y+24	; 0x18
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a e7       	ldi	r20, 0x7A	; 122
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8c 87       	std	Y+12, r24	; 0x0c
    3068:	9d 87       	std	Y+13, r25	; 0x0d
    306a:	ae 87       	std	Y+14, r26	; 0x0e
    306c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3070:	7d 85       	ldd	r23, Y+13	; 0x0d
    3072:	8e 85       	ldd	r24, Y+14	; 0x0e
    3074:	9f 85       	ldd	r25, Y+15	; 0x0f
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	4a e7       	ldi	r20, 0x7A	; 122
    307c:	55 e4       	ldi	r21, 0x45	; 69
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	88 87       	std	Y+8, r24	; 0x08
    3088:	99 87       	std	Y+9, r25	; 0x09
    308a:	aa 87       	std	Y+10, r26	; 0x0a
    308c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    308e:	68 85       	ldd	r22, Y+8	; 0x08
    3090:	79 85       	ldd	r23, Y+9	; 0x09
    3092:	8a 85       	ldd	r24, Y+10	; 0x0a
    3094:	9b 85       	ldd	r25, Y+11	; 0x0b
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9f 83       	std	Y+7, r25	; 0x07
    30ac:	8e 83       	std	Y+6, r24	; 0x06
    30ae:	3f c0       	rjmp	.+126    	; 0x312e <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    30b0:	68 85       	ldd	r22, Y+8	; 0x08
    30b2:	79 85       	ldd	r23, Y+9	; 0x09
    30b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	4c f5       	brge	.+82     	; 0x311a <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    30ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    30cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    30ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e2       	ldi	r20, 0x20	; 32
    30d6:	51 e4       	ldi	r21, 0x41	; 65
    30d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9f 83       	std	Y+7, r25	; 0x07
    30ee:	8e 83       	std	Y+6, r24	; 0x06
    30f0:	0f c0       	rjmp	.+30     	; 0x3110 <Ultrasonic_Trigger+0x148>
    30f2:	80 e9       	ldi	r24, 0x90	; 144
    30f4:	91 e0       	ldi	r25, 0x01	; 1
    30f6:	9d 83       	std	Y+5, r25	; 0x05
    30f8:	8c 83       	std	Y+4, r24	; 0x04
    30fa:	8c 81       	ldd	r24, Y+4	; 0x04
    30fc:	9d 81       	ldd	r25, Y+5	; 0x05
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <Ultrasonic_Trigger+0x136>
    3102:	9d 83       	std	Y+5, r25	; 0x05
    3104:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3106:	8e 81       	ldd	r24, Y+6	; 0x06
    3108:	9f 81       	ldd	r25, Y+7	; 0x07
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9f 83       	std	Y+7, r25	; 0x07
    310e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3110:	8e 81       	ldd	r24, Y+6	; 0x06
    3112:	9f 81       	ldd	r25, Y+7	; 0x07
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	69 f7       	brne	.-38     	; 0x30f2 <Ultrasonic_Trigger+0x12a>
    3118:	24 c0       	rjmp	.+72     	; 0x3162 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311a:	68 85       	ldd	r22, Y+8	; 0x08
    311c:	79 85       	ldd	r23, Y+9	; 0x09
    311e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3120:	9b 85       	ldd	r25, Y+11	; 0x0b
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9f 83       	std	Y+7, r25	; 0x07
    312c:	8e 83       	std	Y+6, r24	; 0x06
    312e:	8e 81       	ldd	r24, Y+6	; 0x06
    3130:	9f 81       	ldd	r25, Y+7	; 0x07
    3132:	9b 83       	std	Y+3, r25	; 0x03
    3134:	8a 83       	std	Y+2, r24	; 0x02
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <Ultrasonic_Trigger+0x172>
    313e:	9b 83       	std	Y+3, r25	; 0x03
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	0f c0       	rjmp	.+30     	; 0x3162 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3144:	69 89       	ldd	r22, Y+17	; 0x11
    3146:	7a 89       	ldd	r23, Y+18	; 0x12
    3148:	8b 89       	ldd	r24, Y+19	; 0x13
    314a:	9c 89       	ldd	r25, Y+20	; 0x14
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	88 8b       	std	Y+16, r24	; 0x10
    3156:	88 89       	ldd	r24, Y+16	; 0x10
    3158:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	8a 95       	dec	r24
    315e:	f1 f7       	brne	.-4      	; 0x315c <Ultrasonic_Trigger+0x194>
    3160:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    3162:	83 e0       	ldi	r24, 0x03	; 3
    3164:	67 e0       	ldi	r22, 0x07	; 7
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	0e 94 6e 08 	call	0x10dc	; 0x10dc <GPIO_writePin>
}
    316c:	68 96       	adiw	r28, 0x18	; 24
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <Ultrasonic_readDistance>:
uint16 Ultrasonic_readDistance(void){
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	00 d0       	rcall	.+0      	; 0x3184 <Ultrasonic_readDistance+0x6>
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62


    Ultrasonic_Trigger();
    3188:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <Ultrasonic_Trigger>
    while (edge != 0);
    318c:	80 91 7d 01 	lds	r24, 0x017D
    3190:	88 23       	and	r24, r24
    3192:	e1 f7       	brne	.-8      	; 0x318c <Ultrasonic_readDistance+0xe>

    uint16 distance;
    distance = (echofinal/117.6)+1;
    3194:	80 91 82 01 	lds	r24, 0x0182
    3198:	90 91 83 01 	lds	r25, 0x0183
    319c:	cc 01       	movw	r24, r24
    319e:	a0 e0       	ldi	r26, 0x00	; 0
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	bc 01       	movw	r22, r24
    31a4:	cd 01       	movw	r24, r26
    31a6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	23 e3       	ldi	r18, 0x33	; 51
    31b4:	33 e3       	ldi	r19, 0x33	; 51
    31b6:	4b ee       	ldi	r20, 0xEB	; 235
    31b8:	52 e4       	ldi	r21, 0x42	; 66
    31ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e8       	ldi	r20, 0x80	; 128
    31cc:	5f e3       	ldi	r21, 0x3F	; 63
    31ce:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01

    return distance;
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void){
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62

    if (0 == edge){
    31fc:	80 91 7d 01 	lds	r24, 0x017D
    3200:	88 23       	and	r24, r24
    3202:	69 f4       	brne	.+26     	; 0x321e <Ultrasonic_edgeProcessing+0x2a>
    	echohigh =  ICU_getInputCaptureValue();
    3204:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <ICU_getInputCaptureValue>
    3208:	90 93 7f 01 	sts	0x017F, r25
    320c:	80 93 7e 01 	sts	0x017E, r24
        ICU_setEdgeDetectionType(FALLING);
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	0e 94 4f 0b 	call	0x169e	; 0x169e <ICU_setEdgeDetectionType>
        edge = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	80 93 7d 01 	sts	0x017D, r24
    321c:	1f c0       	rjmp	.+62     	; 0x325c <Ultrasonic_edgeProcessing+0x68>
    }
    else if (1 == edge)
    321e:	80 91 7d 01 	lds	r24, 0x017D
    3222:	81 30       	cpi	r24, 0x01	; 1
    3224:	d9 f4       	brne	.+54     	; 0x325c <Ultrasonic_edgeProcessing+0x68>
    {
        echolow = ICU_getInputCaptureValue();
    3226:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <ICU_getInputCaptureValue>
    322a:	90 93 81 01 	sts	0x0181, r25
    322e:	80 93 80 01 	sts	0x0180, r24
        echofinal = echolow - echohigh;
    3232:	20 91 80 01 	lds	r18, 0x0180
    3236:	30 91 81 01 	lds	r19, 0x0181
    323a:	80 91 7e 01 	lds	r24, 0x017E
    323e:	90 91 7f 01 	lds	r25, 0x017F
    3242:	a9 01       	movw	r20, r18
    3244:	48 1b       	sub	r20, r24
    3246:	59 0b       	sbc	r21, r25
    3248:	ca 01       	movw	r24, r20
    324a:	90 93 83 01 	sts	0x0183, r25
    324e:	80 93 82 01 	sts	0x0182, r24
        ICU_setEdgeDetectionType(RAISING);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	0e 94 4f 0b 	call	0x169e	; 0x169e <ICU_setEdgeDetectionType>
        edge = 0;
    3258:	10 92 7d 01 	sts	0x017D, r1
    }
}
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <__prologue_saves__>:
    3262:	2f 92       	push	r2
    3264:	3f 92       	push	r3
    3266:	4f 92       	push	r4
    3268:	5f 92       	push	r5
    326a:	6f 92       	push	r6
    326c:	7f 92       	push	r7
    326e:	8f 92       	push	r8
    3270:	9f 92       	push	r9
    3272:	af 92       	push	r10
    3274:	bf 92       	push	r11
    3276:	cf 92       	push	r12
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	ca 1b       	sub	r28, r26
    328c:	db 0b       	sbc	r29, r27
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	09 94       	ijmp

0000329a <__epilogue_restores__>:
    329a:	2a 88       	ldd	r2, Y+18	; 0x12
    329c:	39 88       	ldd	r3, Y+17	; 0x11
    329e:	48 88       	ldd	r4, Y+16	; 0x10
    32a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    32a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    32a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    32a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    32a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    32aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    32ac:	b9 84       	ldd	r11, Y+9	; 0x09
    32ae:	c8 84       	ldd	r12, Y+8	; 0x08
    32b0:	df 80       	ldd	r13, Y+7	; 0x07
    32b2:	ee 80       	ldd	r14, Y+6	; 0x06
    32b4:	fd 80       	ldd	r15, Y+5	; 0x05
    32b6:	0c 81       	ldd	r16, Y+4	; 0x04
    32b8:	1b 81       	ldd	r17, Y+3	; 0x03
    32ba:	aa 81       	ldd	r26, Y+2	; 0x02
    32bc:	b9 81       	ldd	r27, Y+1	; 0x01
    32be:	ce 0f       	add	r28, r30
    32c0:	d1 1d       	adc	r29, r1
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	ed 01       	movw	r28, r26
    32ce:	08 95       	ret

000032d0 <itoa>:
    32d0:	fb 01       	movw	r30, r22
    32d2:	9f 01       	movw	r18, r30
    32d4:	e8 94       	clt
    32d6:	42 30       	cpi	r20, 0x02	; 2
    32d8:	c4 f0       	brlt	.+48     	; 0x330a <itoa+0x3a>
    32da:	45 32       	cpi	r20, 0x25	; 37
    32dc:	b4 f4       	brge	.+44     	; 0x330a <itoa+0x3a>
    32de:	4a 30       	cpi	r20, 0x0A	; 10
    32e0:	29 f4       	brne	.+10     	; 0x32ec <itoa+0x1c>
    32e2:	97 fb       	bst	r25, 7
    32e4:	1e f4       	brtc	.+6      	; 0x32ec <itoa+0x1c>
    32e6:	90 95       	com	r25
    32e8:	81 95       	neg	r24
    32ea:	9f 4f       	sbci	r25, 0xFF	; 255
    32ec:	64 2f       	mov	r22, r20
    32ee:	77 27       	eor	r23, r23
    32f0:	0e 94 99 19 	call	0x3332	; 0x3332 <__udivmodhi4>
    32f4:	80 5d       	subi	r24, 0xD0	; 208
    32f6:	8a 33       	cpi	r24, 0x3A	; 58
    32f8:	0c f0       	brlt	.+2      	; 0x32fc <itoa+0x2c>
    32fa:	89 5d       	subi	r24, 0xD9	; 217
    32fc:	81 93       	st	Z+, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	a1 f7       	brne	.-24     	; 0x32ec <itoa+0x1c>
    3304:	16 f4       	brtc	.+4      	; 0x330a <itoa+0x3a>
    3306:	5d e2       	ldi	r21, 0x2D	; 45
    3308:	51 93       	st	Z+, r21
    330a:	10 82       	st	Z, r1
    330c:	c9 01       	movw	r24, r18
    330e:	0c 94 89 19 	jmp	0x3312	; 0x3312 <strrev>

00003312 <strrev>:
    3312:	dc 01       	movw	r26, r24
    3314:	fc 01       	movw	r30, r24
    3316:	67 2f       	mov	r22, r23
    3318:	71 91       	ld	r23, Z+
    331a:	77 23       	and	r23, r23
    331c:	e1 f7       	brne	.-8      	; 0x3316 <strrev+0x4>
    331e:	32 97       	sbiw	r30, 0x02	; 2
    3320:	04 c0       	rjmp	.+8      	; 0x332a <strrev+0x18>
    3322:	7c 91       	ld	r23, X
    3324:	6d 93       	st	X+, r22
    3326:	70 83       	st	Z, r23
    3328:	62 91       	ld	r22, -Z
    332a:	ae 17       	cp	r26, r30
    332c:	bf 07       	cpc	r27, r31
    332e:	c8 f3       	brcs	.-14     	; 0x3322 <strrev+0x10>
    3330:	08 95       	ret

00003332 <__udivmodhi4>:
    3332:	aa 1b       	sub	r26, r26
    3334:	bb 1b       	sub	r27, r27
    3336:	51 e1       	ldi	r21, 0x11	; 17
    3338:	07 c0       	rjmp	.+14     	; 0x3348 <__udivmodhi4_ep>

0000333a <__udivmodhi4_loop>:
    333a:	aa 1f       	adc	r26, r26
    333c:	bb 1f       	adc	r27, r27
    333e:	a6 17       	cp	r26, r22
    3340:	b7 07       	cpc	r27, r23
    3342:	10 f0       	brcs	.+4      	; 0x3348 <__udivmodhi4_ep>
    3344:	a6 1b       	sub	r26, r22
    3346:	b7 0b       	sbc	r27, r23

00003348 <__udivmodhi4_ep>:
    3348:	88 1f       	adc	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	5a 95       	dec	r21
    334e:	a9 f7       	brne	.-22     	; 0x333a <__udivmodhi4_loop>
    3350:	80 95       	com	r24
    3352:	90 95       	com	r25
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	08 95       	ret

0000335a <_exit>:
    335a:	f8 94       	cli

0000335c <__stop_program>:
    335c:	ff cf       	rjmp	.-2      	; 0x335c <__stop_program>
